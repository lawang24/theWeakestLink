{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\catas\\\\Desktop\\\\Basic Chess Game\\\\client\\\\src\\\\pages\\\\gameFunctional.js\",\n  _s = $RefreshSig$();\nimport Chessboard from \"chessboardjsx\";\nimport { useState, useEffect } from \"react\";\nimport { Logo, SettingButton } from \"../StyledComponents\";\nimport { GameWrapper, RoomCode as RoomCodeButton, ChangeTeam, TeamName, StartGame, GameplaySection } from \"../StyledComponents/gameComponents\";\nimport { TeamSection } from \"../StyledComponents/gameComponents\";\nimport { Chess } from \"chess.js\";\nimport { Teams, Ratings, CountdownTimer } from \"../items/displayItems\";\nimport { usePlayerContext } from '../contexts/PlayerContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STOCKFISH = window.STOCKFISH;\nconst game = new Chess();\nconst Game = () => {\n  _s();\n  const [fen, setFen] = useState(\"start\");\n  const [turn, setTurn] = useState(false);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [canSubmitMove, setCanSubmitMove] = useState(false);\n  const [whiteTurn, setWhiteTurn] = useState(false);\n  const [isCheckmate, setIsCheckmate] = useState(false);\n  const [timeOut, setTimeOut] = useState(false);\n  const [whiteTime, setWhiteTime] = useState(600);\n  const [blackTime, setBlackTime] = useState(600);\n  const [whiteTeam, setWhiteTeam] = useState(new Map());\n  const [blackTeam, setBlackTeam] = useState(new Map());\n  const {\n    socket,\n    roomCode,\n    setRoomCode,\n    host,\n    isWhite,\n    setIsWhite,\n    username\n  } = usePlayerContext();\n  let proposedMove;\n  useEffect(() => {\n    socket.on(\"room_joined\", (roomCode, isWhite) => {\n      setRoomCode(roomCode);\n      setIsWhite(isWhite);\n    });\n    socket.on(\"next_turn\", (worst_fen, nowWhiteTurn) => {\n      setFen(worst_fen);\n      game.load(worst_fen);\n\n      // check game conditions\n      if (game.isCheckmate() === true) {\n        setIsCheckmate(true);\n        setGameStarted(false);\n      }\n      // allow the proper players to move \n      else {\n        setWhiteTurn(whiteTurn => !whiteTurn);\n        setTurn(turn => !turn);\n        if (isWhite === nowWhiteTurn) setCanSubmitMove(true);\n      }\n    });\n    socket.on(\"update_white_team\", white_team => {\n      setWhiteTeam(new Map(JSON.parse(white_team)));\n    });\n    socket.on(\"update_black_team\", black_team => {\n      setBlackTeam(new Map(JSON.parse(black_team)));\n    });\n    socket.on(\"begin_game\", () => {\n      setWhiteTurn(true);\n      setGameStarted(true);\n      setFen(\"start\");\n      setIsCheckmate(false);\n      setTimeOut(false);\n      setWhiteTime(600);\n      setBlackTime(600);\n      if (isWhite) {\n        setTurn(true);\n        setCanSubmitMove(true);\n      }\n      game.reset(); // restart the game\n    });\n\n    socket.on(\"time_out\", () => {\n      setGameStarted(false);\n      setTimeOut(true);\n    });\n    socket.on(\"update_timer\", timer => {\n      setWhiteTime(timer[0]);\n      setBlackTime(timer[1]);\n    });\n    return () => {\n      socket.removeAllListeners();\n    };\n  }, [isWhite, setIsWhite, setRoomCode, socket]);\n\n  // send the client's rating to the server\n  const sendRating = (rating, position) => {\n    socket.emit(\"send_rating\", rating, position, roomCode, isWhite, username);\n  };\n  const changeTeam = () => {\n    console.log(roomCode);\n    socket.emit(\"change_team\", isWhite, roomCode, username);\n    setIsWhite(isWhite => !isWhite);\n  };\n  const onDrop = _ref => {\n    let {\n      sourceSquare,\n      targetSquare\n    } = _ref;\n    if (!turn || !canSubmitMove) return;\n    const move = game.move({\n      from: sourceSquare,\n      to: targetSquare\n    });\n    if (move === null) return; // illegal move  \n    console.log(game.fen());\n    // grab player proposed position and show it\n    proposedMove = game.fen();\n    setFen(proposedMove);\n    setCanSubmitMove(false);\n    game.undo();\n    return new Promise(resolve => {\n      resolve();\n    }).then(() => engineGame().evalMove());\n  };\n  const engineGame = options => {\n    options = options || {};\n\n    /// We can load Stockfish via Web Workers or via STOCKFISH() if loaded from a <script> tag.\n    let engine = typeof STOCKFISH === \"function\" ? STOCKFISH() : new Worker(options.stockfishjs || \"stockfish.js\");\n\n    //let announced_game_over;\n\n    // setInterval(() => {\n    //   if (announced_game_over) {\n    //     return;\n    //   }\n    //   if (game.isGameOver()) {\n    //     announced_game_over = true;\n    //   }\n    // }, 500);\n\n    const evalMove = () => {\n      if (!game.isGameOver()) {\n        engine.postMessage(\"ucinewgame\");\n        console.log(\"proposedMove:\" + proposedMove);\n        engine.postMessage(\"position fen \" + proposedMove);\n        engine.postMessage(\"eval\");\n      }\n    };\n    engine.onmessage = event => {\n      let line;\n      if (event && typeof event === \"object\") {\n        line = event.data;\n      } else {\n        line = event;\n      }\n      if (line.substr(0, \"Total Evaluation\".length) === \"Total Evaluation\") {\n        let score = parseFloat(line.substr(18).substr(0, 4));\n        if (!isWhite) score = score * -1;\n        sendRating(score, proposedMove);\n      }\n    };\n    return {\n      start: function () {\n        engine.postMessage(\"ucinewgame\");\n        engine.postMessage(\"isready\");\n        // announced_game_over = false;\n      },\n\n      evalMove: function () {\n        evalMove();\n      }\n    };\n  };\n\n  // increment_whitetime = (time) => {\n  //   this.setState( {white_time : time } ) \n  // }\n\n  // increment_blacktime = () => {\n  //   this.setState((state) => ({\n  //     black_time: state.black_time - 1\n  //   }));\n  // };\n\n  const StartGameButton = () => {\n    if (host) return /*#__PURE__*/_jsxDEV(StartGame, {\n      onClick: () => socket.emit(\"start_game\", roomCode),\n      children: \"START\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 15\n    }, this);\n  };\n  const GameControls = () => {\n    if (!gameStarted) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          justifyContent: \"space-evenly\",\n          width: \"70%\",\n          height: \"9%\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(StartGameButton, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChangeTeam, {\n          team: \"white\",\n          onClick: e => changeTeam(true),\n          children: \"CHANGE TEAM\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  const Gameover = () => {\n    if (isCheckmate) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"CHECKMATE BUCKO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 15\n      }, this);\n    } else if (timeOut) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [isWhite ? \"WHITE\" : \"BLACK\", \" WINS ON TIME\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 15\n      }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(GameWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Chessboard, {\n      id: \"board!\",\n      position: fen,\n      onDrop: onDrop,\n      boardStyle: boardStyle,\n      orientation: isWhite ? \"white\" : \"black\",\n      calcWidth: screen => Math.min(screen.screenHeight * .9, screen.screenWidth * .53)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        \"flex-direction\": 'column',\n        \"justify-content\": \"space-between\",\n        height: \"100vh\",\n        width: \"33vw\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Logo, {\n        style: {\n          width: \"50%\",\n          height: \"auto\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GameplaySection, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            \"flex-flow\": \"row wrap\",\n            \"justify-content\": \"center\",\n            height: \"fit-content\",\n            width: \"100%\",\n            \"margin-top\": \"17%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(TeamSection, {\n            children: [/*#__PURE__*/_jsxDEV(TeamName, {\n              color: \"white\",\n              children: \"WHITE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Teams, {\n              team: whiteTeam,\n              isWhite: true,\n              gameStarted: gameStarted\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TeamSection, {\n            children: [/*#__PURE__*/_jsxDEV(TeamName, {\n              children: \"BLACK\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Teams, {\n              team: blackTeam,\n              isWhite: false,\n              gameStarted: gameStarted\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Ratings, {\n          team: isWhite ? whiteTeam : blackTeam,\n          gameStarted: gameStarted\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(GameControls, {\n          gameStarted: gameStarted\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          style: {\n            color: \"#FFFFFF\"\n          },\n          children: [turn ? \"Your\" : \"Not Your\", \" Turn\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          style: {\n            color: \"#FFFFFF\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Gameover, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            height: \"8%\",\n            width: \"30%\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(CountdownTimer, {\n            totalSeconds: whiteTime,\n            isRunning: whiteTurn\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CountdownTimer, {\n            totalSeconds: blackTime,\n            isRunning: !whiteTurn && gameStarted\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        id: \"footer\",\n        style: {\n          display: \"flex\",\n          width: \"100%\",\n          margin: \"0 0 34px 34px\",\n          'justify-content': 'start'\n        },\n        children: [/*#__PURE__*/_jsxDEV(SettingButton, {\n          style: {\n            height: \"48px\",\n            width: \"48px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RoomCodeButton, {\n          children: [\"ROOM: \", roomCode]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"bzR/ommiZkzy1pSY4RTH6rxdGqk=\", false, function () {\n  return [usePlayerContext];\n});\n_c = Game;\nexport default Game;\nconst boardStyle = {\n  border: \"10px solid #868BAC\",\n  boxShadow: `0 5px 15px rgba(0, 0, 0, 0.5)`,\n  \"border-radius\": \"5px\",\n  position: \"relative\",\n  left: \"5%\"\n};\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["Chessboard","useState","useEffect","Logo","SettingButton","GameWrapper","RoomCode","RoomCodeButton","ChangeTeam","TeamName","StartGame","GameplaySection","TeamSection","Chess","Teams","Ratings","CountdownTimer","usePlayerContext","STOCKFISH","window","game","Game","fen","setFen","turn","setTurn","gameStarted","setGameStarted","canSubmitMove","setCanSubmitMove","whiteTurn","setWhiteTurn","isCheckmate","setIsCheckmate","timeOut","setTimeOut","whiteTime","setWhiteTime","blackTime","setBlackTime","whiteTeam","setWhiteTeam","Map","blackTeam","setBlackTeam","socket","roomCode","setRoomCode","host","isWhite","setIsWhite","username","proposedMove","on","worst_fen","nowWhiteTurn","load","white_team","JSON","parse","black_team","reset","timer","removeAllListeners","sendRating","rating","position","emit","changeTeam","console","log","onDrop","sourceSquare","targetSquare","move","from","to","undo","Promise","resolve","then","engineGame","evalMove","options","engine","Worker","stockfishjs","isGameOver","postMessage","onmessage","event","line","data","substr","length","score","parseFloat","start","StartGameButton","GameControls","display","justifyContent","width","height","e","Gameover","boardStyle","screen","Math","min","screenHeight","screenWidth","color","alignItems","margin","border","boxShadow","left"],"sources":["C:/Users/catas/Desktop/Basic Chess Game/client/src/pages/gameFunctional.js"],"sourcesContent":["import Chessboard from \"chessboardjsx\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Logo, SettingButton } from \"../StyledComponents\"\r\nimport { GameWrapper, RoomCode as RoomCodeButton, ChangeTeam, TeamName, StartGame, GameplaySection } from \"../StyledComponents/gameComponents\"\r\nimport { TeamSection } from \"../StyledComponents/gameComponents\";\r\nimport { Chess } from \"chess.js\";\r\nimport { Teams, Ratings, CountdownTimer } from \"../items/displayItems\";\r\nimport { usePlayerContext } from '../contexts/PlayerContext';\r\n\r\nconst STOCKFISH = window.STOCKFISH;\r\nconst game = new Chess();\r\n\r\nconst Game = () => {\r\n  const [fen, setFen] = useState(\"start\");\r\n  const [turn, setTurn] = useState(false);\r\n  const [gameStarted, setGameStarted] = useState(false);\r\n  const [canSubmitMove, setCanSubmitMove] = useState(false);\r\n  const [whiteTurn, setWhiteTurn] = useState(false);\r\n  const [isCheckmate, setIsCheckmate] = useState(false);\r\n  const [timeOut, setTimeOut] = useState(false);\r\n  const [whiteTime, setWhiteTime] = useState(600);\r\n  const [blackTime, setBlackTime] = useState(600);\r\n  const [whiteTeam, setWhiteTeam] = useState(new Map());\r\n  const [blackTeam, setBlackTeam] = useState(new Map());\r\n\r\n  const { socket,\r\n    roomCode,\r\n    setRoomCode,\r\n    host,\r\n    isWhite,\r\n    setIsWhite,\r\n    username,\r\n  } = usePlayerContext();\r\n\r\n  let proposedMove;\r\n\r\n  useEffect(() => {\r\n\r\n    socket.on(\"room_joined\", (roomCode, isWhite) => {\r\n      setRoomCode(roomCode);\r\n      setIsWhite(isWhite);\r\n    });\r\n  \r\n    socket.on(\"next_turn\",  (worst_fen, nowWhiteTurn) => {\r\n      setFen(worst_fen);\r\n      game.load(worst_fen);\r\n         \r\n      // check game conditions\r\n      if (game.isCheckmate() === true) {\r\n        setIsCheckmate(true);\r\n        setGameStarted(false);\r\n      }\r\n      // allow the proper players to move \r\n      else {\r\n        setWhiteTurn((whiteTurn) => !whiteTurn);\r\n        setTurn((turn) => !turn);\r\n        if (isWhite === nowWhiteTurn) setCanSubmitMove(true);\r\n      }\r\n\r\n    });\r\n\r\n    socket.on(\"update_white_team\", (white_team) => {\r\n      setWhiteTeam(new Map(JSON.parse(white_team)));\r\n    });\r\n\r\n    socket.on(\"update_black_team\", (black_team) => {\r\n      setBlackTeam(new Map(JSON.parse(black_team)));\r\n    });\r\n\r\n    socket.on(\"begin_game\", () => {\r\n      setWhiteTurn(true);\r\n      setGameStarted(true);\r\n      setFen(\"start\");\r\n      setIsCheckmate(false);\r\n      setTimeOut(false);\r\n      setWhiteTime(600);\r\n      setBlackTime(600);\r\n\r\n      if (isWhite) {\r\n        setTurn(true);\r\n        setCanSubmitMove(true);\r\n      }\r\n      game.reset(); // restart the game\r\n    });\r\n\r\n    socket.on(\"time_out\", () => {\r\n      setGameStarted(false);\r\n      setTimeOut(true);\r\n    });\r\n\r\n    socket.on(\"update_timer\", (timer) => {\r\n      setWhiteTime(timer[0]);\r\n      setBlackTime(timer[1]);\r\n    });\r\n\r\n    return () => {\r\n      socket.removeAllListeners();\r\n    }\r\n\r\n  }, [isWhite, setIsWhite, setRoomCode, socket]);\r\n\r\n  // send the client's rating to the server\r\n  const sendRating = (rating, position) => {\r\n    socket.emit(\"send_rating\", rating, position, roomCode, isWhite, username);\r\n  };\r\n\r\n  const changeTeam = () => {\r\n    console.log(roomCode);\r\n    socket.emit(\"change_team\", isWhite, roomCode, username);\r\n    setIsWhite((isWhite) => !isWhite);\r\n  }\r\n\r\n  const onDrop =  ({ sourceSquare, targetSquare }) => {\r\n\r\n    if (!turn || !canSubmitMove) return;\r\n    const move = game.move({ from: sourceSquare, to: targetSquare })\r\n    if (move === null) return; // illegal move  \r\n    console.log(game.fen());\r\n    // grab player proposed position and show it\r\n    proposedMove = game.fen();\r\n    setFen(proposedMove);\r\n    setCanSubmitMove(false);\r\n\r\n    game.undo();\r\n\r\n    return new Promise((resolve) => {\r\n      resolve();\r\n    }).then(() => engineGame().evalMove());\r\n  };\r\n\r\n  const engineGame = (options) => {\r\n    options = options || {};\r\n\r\n    /// We can load Stockfish via Web Workers or via STOCKFISH() if loaded from a <script> tag.\r\n    let engine =\r\n      typeof STOCKFISH === \"function\"\r\n        ? STOCKFISH()\r\n        : new Worker(options.stockfishjs || \"stockfish.js\");\r\n\r\n    //let announced_game_over;\r\n\r\n    // setInterval(() => {\r\n    //   if (announced_game_over) {\r\n    //     return;\r\n    //   }\r\n    //   if (game.isGameOver()) {\r\n    //     announced_game_over = true;\r\n    //   }\r\n    // }, 500);\r\n\r\n    const evalMove = () => {\r\n      if (!game.isGameOver()) {\r\n        engine.postMessage(\"ucinewgame\");\r\n        console.log(\"proposedMove:\"+ proposedMove)\r\n        engine.postMessage(\"position fen \" + proposedMove);\r\n        engine.postMessage(\"eval\");\r\n      }\r\n    };\r\n\r\n    engine.onmessage = (event) => {\r\n      let line;\r\n\r\n      if (event && typeof event === \"object\") {\r\n        line = event.data;\r\n      } else {\r\n        line = event;\r\n      }\r\n      if (line.substr(0, \"Total Evaluation\".length) === \"Total Evaluation\") {\r\n        let score = parseFloat(line.substr(18).substr(0, 4));\r\n        if (!isWhite) score = score * -1;\r\n        sendRating(score, proposedMove);\r\n      }\r\n    };\r\n\r\n    return {\r\n      start: function () {\r\n        engine.postMessage(\"ucinewgame\");\r\n        engine.postMessage(\"isready\");\r\n       // announced_game_over = false;\r\n      },\r\n      evalMove: function () {\r\n        evalMove();\r\n      },\r\n    };\r\n  };\r\n\r\n  // increment_whitetime = (time) => {\r\n  //   this.setState( {white_time : time } ) \r\n  // }\r\n\r\n  // increment_blacktime = () => {\r\n  //   this.setState((state) => ({\r\n  //     black_time: state.black_time - 1\r\n  //   }));\r\n  // };\r\n\r\n  const StartGameButton = () => {\r\n    if (host)\r\n      return (<StartGame onClick={() => socket.emit(\"start_game\", roomCode)}>START</StartGame>);\r\n  };\r\n\r\n  const GameControls = () => {\r\n    if (!gameStarted) {\r\n      return (\r\n        <div style={{ display: \"flex\", justifyContent: \"space-evenly\", width: \"70%\", height: \"9%\" }}>\r\n          <StartGameButton />\r\n          <ChangeTeam team=\"white\" onClick={(e) => changeTeam(true)} >CHANGE TEAM</ChangeTeam>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  const Gameover = () => {\r\n    if (isCheckmate) {\r\n      return (<div>CHECKMATE BUCKO</div>)\r\n    }\r\n    else if (timeOut) {\r\n      return (<div>{isWhite ? \"WHITE\" : \"BLACK\"} WINS ON TIME</div>)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <GameWrapper>\r\n      <Chessboard\r\n        id=\"board!\"\r\n        position={fen}\r\n        onDrop={onDrop}\r\n        boardStyle={boardStyle}\r\n        orientation={isWhite ? \"white\" : \"black\"}\r\n        calcWidth={(screen) => Math.min(screen.screenHeight * .9, screen.screenWidth * .53)}\r\n      />\r\n\r\n      <div style={{ display: \"flex\", \"flex-direction\": 'column', \"justify-content\": \"space-between\", height: \"100vh\", width: \"33vw\" }}>\r\n\r\n        <Logo style={{ width: \"50%\", height: \"auto\" }}></Logo>\r\n\r\n\r\n        <GameplaySection>\r\n          <div style={{ display: \"flex\", \"flex-flow\": \"row wrap\", \"justify-content\": \"center\", height: \"fit-content\", width: \"100%\", \"margin-top\": \"17%\" }}>\r\n            <TeamSection>\r\n              <TeamName color=\"white\">WHITE</TeamName>\r\n              <Teams team={whiteTeam} isWhite={true}  gameStarted={gameStarted} />\r\n            </TeamSection>\r\n            <TeamSection>\r\n              <TeamName>BLACK</TeamName>\r\n              <Teams team={blackTeam} isWhite={false} gameStarted={gameStarted} />\r\n            </TeamSection>\r\n          </div>\r\n\r\n          <Ratings team={isWhite ? whiteTeam : blackTeam} gameStarted = {gameStarted} />\r\n\r\n          <GameControls gameStarted={gameStarted} />\r\n\r\n          <h1 style={{ color: \"#FFFFFF\" }}>{turn ? \"Your\" : \"Not Your\"} Turn</h1>\r\n          <h1 style={{ color: \"#FFFFFF\" }}>\r\n            <Gameover />\r\n          </h1>\r\n\r\n          <div style={{ display: \"flex\", height: \"8%\", width: \"30%\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n            <CountdownTimer totalSeconds={whiteTime} isRunning={whiteTurn} />\r\n            <CountdownTimer totalSeconds={blackTime} isRunning={(!whiteTurn && gameStarted)} />\r\n          </div>\r\n        </GameplaySection>\r\n\r\n        <section id=\"footer\" style={{ display: \"flex\", width: \"100%\", margin: \"0 0 34px 34px\", 'justify-content': 'start' }}>\r\n          <SettingButton style={{ height: \"48px\", width: \"48px\", }}></SettingButton>\r\n          <RoomCodeButton>ROOM: {roomCode}</RoomCodeButton>\r\n        </section>\r\n\r\n      </div>\r\n    </GameWrapper>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n\r\nconst boardStyle = {\r\n  border: \"10px solid #868BAC\",\r\n  boxShadow: `0 5px 15px rgba(0, 0, 0, 0.5)`,\r\n  \"border-radius\": \"5px\",\r\n  position: \"relative\",\r\n  left: \"5%\"\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}