{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\catas\\\\Desktop\\\\Basic Chess Game\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport Chessboard from \"chessboardjsx\";\nimport io from 'socket.io-client';\nimport { Chess } from \"chess.js\";\nimport stockfish from \"stockfish\";\n\n// const [message, setMessage] = useState(\"\");\n// const [messageReceived, setMessageReceived] = useState([]);\n\n// const sendMessage = () => {\n//   socket.emit(\"send_message\", { message });\n//   setMessage(\"\");\n// };\n\n// useEffect(() => {\n//   socket.on(\"receive_message\", (data) => {\n//     setMessageReceived(data);\n//   });\n// }, [socket])\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STOCKFISH = new stockfish();\n// const socket = io.connect(\"http://localhost:3001\");\nconst game = new Chess();\nfunction App() {\n  _s();\n  var score;\n  const [position, setPosition] = useState(\"start\");\n  const onDrop = _ref => {\n    let {\n      sourceSquare,\n      targetSquare\n    } = _ref;\n    const move = game.move({\n      from: sourceSquare,\n      to: targetSquare\n    });\n    if (move === null) return; //illegal move  \n\n    // grab player proposed position and show it\n    const proposed = game.fen();\n    setPosition(proposed);\n    game.undo();\n\n    //grab the rating of the move\n    const rating = engineGame().evalMove(proposed);\n\n    //socket.emit(\"move\", rating);\n  };\n\n  const engineGame = options => {\n    options = options || {};\n\n    /// We can load Stockfish via Web Workers or via STOCKFISH() if loaded from a <script> tag.\n    let engine = typeof STOCKFISH === \"function\" ? STOCKFISH() : new Worker(options.stockfishjs || \"stockfish.js\");\n    let announced_game_over;\n    setInterval(() => {\n      if (announced_game_over) {\n        return;\n      }\n      if (game.isGameOver()) {\n        announced_game_over = true;\n      }\n    }, 500);\n    const evalMove = proposed => {\n      if (!game.isGameOver()) {\n        engine.postMessage(\"ucinewgame\");\n        engine.postMessage(\"position fen \" + proposed);\n        engine.postMessage(\"eval\");\n      }\n    };\n    engine.onmessage = event => {\n      let line;\n      if (event && typeof event === \"object\") {\n        line = event.data;\n      } else {\n        line = event;\n      }\n      if (line.substr(0, \"Total Evaluation\".length) === \"Total Evaluation\") {\n        score = line.substr(18).substr(0, 4);\n        console.log(score); //testing\n      }\n    };\n\n    return {\n      start: function () {\n        engine.postMessage(\"ucinewgame\");\n        engine.postMessage(\"isready\");\n        announced_game_over = false;\n      },\n      evalMove: function () {\n        evalMove();\n      }\n    };\n  };\n\n  // useEffect(() => {\n  //   socket.on(\"receive_move\", (move) => {\n  //     if (move === null) return;\n  //     setPosition(move);\n  //   });\n  // }, [socket])\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: boardsContainer,\n    children: /*#__PURE__*/_jsxDEV(Chessboard, {\n      id: \"board!\",\n      position: position,\n      width: 320,\n      onDrop: onDrop,\n      boardStyle: boardStyle,\n      orientation: \"white\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"eqd06uPtj5IxzYjuiOxwUznmFQo=\");\n_c = App;\nexport default App;\nconst boardsContainer = {\n  display: \"flex\",\n  justifyContent: \"space-around\",\n  alignItems: \"center\"\n};\nconst boardStyle = {\n  borderRadius: \"5px\",\n  boxShadow: `0 5px 15px rgba(0, 0, 0, 0.5)`\n};\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","Chessboard","io","Chess","stockfish","STOCKFISH","game","App","score","position","setPosition","onDrop","sourceSquare","targetSquare","move","from","to","proposed","fen","undo","rating","engineGame","evalMove","options","engine","Worker","stockfishjs","announced_game_over","setInterval","isGameOver","postMessage","onmessage","event","line","data","substr","length","console","log","start","boardsContainer","boardStyle","display","justifyContent","alignItems","borderRadius","boxShadow"],"sources":["C:/Users/catas/Desktop/Basic Chess Game/client/src/App.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport Chessboard from \"chessboardjsx\";\nimport io from 'socket.io-client';\nimport {Chess} from \"chess.js\";\nimport stockfish from \"stockfish\";\n\n// const [message, setMessage] = useState(\"\");\n// const [messageReceived, setMessageReceived] = useState([]);\n\n// const sendMessage = () => {\n//   socket.emit(\"send_message\", { message });\n//   setMessage(\"\");\n// };\n\n// useEffect(() => {\n//   socket.on(\"receive_message\", (data) => {\n//     setMessageReceived(data);\n//   });\n// }, [socket])\n\nconst STOCKFISH = new stockfish();\n// const socket = io.connect(\"http://localhost:3001\");\nconst game = new Chess();\n\nfunction App() {\n\n  var score;\n  const [position, setPosition] = useState(\"start\");\n\n  const onDrop = ({ sourceSquare, targetSquare }) => {\n    const move = game.move({ from: sourceSquare, to: targetSquare })\n    if (move === null) return; //illegal move  \n\n    // grab player proposed position and show it\n    const proposed = game.fen()\n    setPosition(proposed);\n    game.undo();\n\n    //grab the rating of the move\n    const rating = engineGame().evalMove(proposed)\n\n    //socket.emit(\"move\", rating);\n  }\n\n  const engineGame = (options) => {\n    options = options || {};\n\n    /// We can load Stockfish via Web Workers or via STOCKFISH() if loaded from a <script> tag.\n    let engine =\n      typeof STOCKFISH === \"function\"\n        ? STOCKFISH()\n        : new Worker(options.stockfishjs || \"stockfish.js\");\n    let announced_game_over;\n\n    setInterval(()=> {\n      if (announced_game_over) {\n        return;\n      }\n      if (game.isGameOver()) {\n        announced_game_over = true;\n      }\n    }, 500);\n\n    const evalMove = (proposed) => {\n      if (!game.isGameOver()) {\n        engine.postMessage(\"ucinewgame\");\n        engine.postMessage(\"position fen \" + proposed);\n        engine.postMessage(\"eval\");\n      }\n    };\n\n    engine.onmessage = (event) => {\n      let line;\n\n      if (event && typeof event === \"object\") {\n        line = event.data;\n      } else {\n        line = event;\n      }\n\n      if (line.substr(0, \"Total Evaluation\".length) === \"Total Evaluation\"){\n        score = line.substr(18).substr(0, 4);\n        console.log(score); //testing\n      }\n        \n  };\n\n  return {\n    start: function () {\n      engine.postMessage(\"ucinewgame\");\n      engine.postMessage(\"isready\");\n      announced_game_over = false;\n    },\n    evalMove: function () {\n      evalMove();\n    },\n  };\n};\n\n// useEffect(() => {\n//   socket.on(\"receive_move\", (move) => {\n//     if (move === null) return;\n//     setPosition(move);\n//   });\n// }, [socket])\n\nreturn (\n  <div style={boardsContainer}>\n    <Chessboard\n      id=\"board!\"\n      position={position}\n      width={320}\n      onDrop={onDrop}\n      boardStyle={boardStyle}\n      orientation=\"white\"\n    />\n  </div>\n);\n}\n\nexport default App;\n\nconst boardsContainer = {\n  display: \"flex\",\n  justifyContent: \"space-around\",\n  alignItems: \"center\"\n};\nconst boardStyle = {\n  borderRadius: \"5px\",\n  boxShadow: `0 5px 15px rgba(0, 0, 0, 0.5)`\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}