{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\catas\\\\Desktop\\\\Basic Chess Game\\\\client\\\\src\\\\components\\\\game.js\";\nimport Chessboard from \"chessboardjsx\";\nimport { React, Component } from \"react\";\nimport { Wrapper } from \"../StyledComponents\";\nimport styled from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STOCKFISH = window.STOCKFISH;\nconst GameWrapper = styled(Wrapper)`\nflex-flow:column-reverse wrap-reverse;\n`;\n_c = GameWrapper;\nconst boardWrapper = styled.div`\nwidth:50%;\n`;\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.sendRating = (rating, position) => {\n      this.props.socket.emit(\"player_move\", {\n        rating: rating,\n        position: position,\n        roomCode: this.props.roomCode\n      });\n    };\n    this.joinTeam = team => {\n      this.props.socket.emit(\"join_team\", team);\n      this.setState({\n        team: team\n      });\n    };\n    this.onDrop = _ref => {\n      let {\n        sourceSquare,\n        targetSquare\n      } = _ref;\n      if (!this.state.turn) return;\n      const move = this.props.game.move({\n        from: sourceSquare,\n        to: targetSquare\n      });\n      if (move === null) return; // illegal move  \n\n      // grab player proposed position and show it\n      this.setState({\n        fen: this.props.game.fen()\n      });\n      this.props.game.undo();\n      return new Promise(resolve => {\n        resolve();\n      }).then(() => this.engineGame().evalMove());\n    };\n    this.engineGame = options => {\n      options = options || {};\n\n      /// We can load Stockfish via Web Workers or via STOCKFISH() if loaded from a <script> tag.\n      let engine = typeof STOCKFISH === \"function\" ? STOCKFISH() : new Worker(options.stockfishjs || \"stockfish.js\");\n      let announced_game_over;\n      setInterval(() => {\n        if (announced_game_over) {\n          return;\n        }\n        if (this.props.game.isGameOver()) {\n          announced_game_over = true;\n        }\n      }, 500);\n      const evalMove = () => {\n        if (!this.props.game.isGameOver()) {\n          engine.postMessage(\"ucinewgame\");\n          engine.postMessage(\"position fen \" + this.state.fen);\n          engine.postMessage(\"eval\");\n        }\n      };\n      engine.onmessage = event => {\n        let line;\n        if (event && typeof event === \"object\") {\n          line = event.data;\n        } else {\n          line = event;\n        }\n        if (line.substr(0, \"Total Evaluation\".length) === \"Total Evaluation\") {\n          let score = parseFloat(line.substr(18).substr(0, 4));\n          if (this.state.team === \"black\") score = score * -1;\n          this.sendRating(score, this.state.fen);\n        }\n      };\n      return {\n        start: function () {\n          engine.postMessage(\"ucinewgame\");\n          engine.postMessage(\"isready\");\n          announced_game_over = false;\n        },\n        evalMove: function () {\n          evalMove();\n        }\n      };\n    };\n    this.state = {\n      fen: \"start\",\n      turn: false,\n      team: \"none\"\n    };\n    this.width = React.createRef();\n    this.sendRating = this.sendRating.bind(this);\n    this.onDrop = this.onDrop.bind(this);\n    this.joinTeam = this.joinTeam.bind(this);\n  }\n  componentDidMount() {\n    console.log(this.width.current.offsetWidth);\n    this.props.socket.on(\"weakest_position\", weakest => {\n      this.setState({\n        fen: weakest\n      });\n      this.props.game.load(weakest);\n    });\n    this.props.socket.on(\"nextTurn\", whiteTurn => {\n      if (this.state.team === \"white\") this.setState({\n        turn: whiteTurn\n      });\n      if (this.state.team === \"black\") this.setState({\n        turn: !whiteTurn\n      });\n    });\n  }\n  render() {\n    let status = this.state.turn ? \"Your\" : \"Not Your\";\n    let team;\n    switch (this.state.team) {\n      case \"white\":\n        team = \"White\";\n        break;\n      case \"black\":\n        team = \"Black\";\n        break;\n      default:\n        team = \"Spectating\";\n    }\n    const startGame = isHost => {\n      if (isHost) return /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.props.socket.emit(\"start_game\"),\n        children: \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 27\n      }, this);\n    };\n    return /*#__PURE__*/_jsxDEV(GameWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        ref: this.width,\n        children: /*#__PURE__*/_jsxDEV(Chessboard, {\n          id: \"board!\",\n          position: this.state.fen,\n          width: this.width.current.offsetWidth,\n          onDrop: this.onDrop,\n          boardStyle: boardStyle,\n          orientation: this.state.team\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        value: \"white\",\n        onClick: e => this.joinTeam(e.target.value, true),\n        children: \"Join White Team\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        value: \"black\",\n        onClick: e => this.joinTeam(e.target.value, false),\n        children: \"Join Black Team\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: startGame(this.props.host)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [team, \" Player\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [status, \" Turn \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default Game;\nconst boardStyle = {\n  borderRadius: \"5px\",\n  boxShadow: `0 5px 15px rgba(0, 0, 0, 0.5)`\n};\nvar _c;\n$RefreshReg$(_c, \"GameWrapper\");","map":{"version":3,"names":["Chessboard","React","Component","Wrapper","styled","STOCKFISH","window","GameWrapper","boardWrapper","div","Game","constructor","props","sendRating","rating","position","socket","emit","roomCode","joinTeam","team","setState","onDrop","sourceSquare","targetSquare","state","turn","move","game","from","to","fen","undo","Promise","resolve","then","engineGame","evalMove","options","engine","Worker","stockfishjs","announced_game_over","setInterval","isGameOver","postMessage","onmessage","event","line","data","substr","length","score","parseFloat","start","width","createRef","bind","componentDidMount","console","log","current","offsetWidth","on","weakest","load","whiteTurn","render","status","startGame","isHost","boardStyle","e","target","value","host","borderRadius","boxShadow"],"sources":["C:/Users/catas/Desktop/Basic Chess Game/client/src/components/game.js"],"sourcesContent":["import Chessboard from \"chessboardjsx\";\r\nimport {React, Component } from \"react\";\r\nimport {Wrapper} from \"../StyledComponents\";\r\nimport styled from \"styled-components\";\r\n\r\nconst STOCKFISH = window.STOCKFISH;\r\n\r\nconst GameWrapper = styled(Wrapper)`\r\nflex-flow:column-reverse wrap-reverse;\r\n`;\r\n\r\nconst boardWrapper = styled.div`\r\nwidth:50%;\r\n`;\r\n\r\nclass Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      fen: \"start\",\r\n      turn: false,\r\n      team: \"none\",\r\n    };\r\n    this.width= React.createRef();\r\n    this.sendRating = this.sendRating.bind(this);\r\n    this.onDrop = this.onDrop.bind(this);\r\n    this.joinTeam = this.joinTeam.bind(this);\r\n  };\r\n\r\n  componentDidMount() {\r\n    \r\n    console.log(this.width.current.offsetWidth);\r\n    \r\n    this.props.socket.on(\"weakest_position\", (weakest) => {\r\n      this.setState({ fen: weakest });\r\n      this.props.game.load(weakest);\r\n    });\r\n    this.props.socket.on(\"nextTurn\", (whiteTurn) => {\r\n      if (this.state.team === \"white\") this.setState({ turn: whiteTurn });\r\n      if (this.state.team === \"black\") this.setState({ turn: !whiteTurn });\r\n    });\r\n  };\r\n\r\n  sendRating = (rating, position) => {\r\n    this.props.socket.emit(\"player_move\", ({ rating: rating, position: position, roomCode: this.props.roomCode }));\r\n  };\r\n\r\n  joinTeam = (team) => {\r\n    this.props.socket.emit(\"join_team\", team);\r\n    this.setState({ team: team });\r\n  }\r\n\r\n\r\n  onDrop = ({ sourceSquare, targetSquare }) => {\r\n    if (!this.state.turn) return;\r\n    const move = this.props.game.move({ from: sourceSquare, to: targetSquare })\r\n    if (move === null) return; // illegal move  \r\n\r\n    // grab player proposed position and show it\r\n    this.setState({ fen: this.props.game.fen() })\r\n\r\n    this.props.game.undo();\r\n\r\n    return new Promise((resolve) => {\r\n      resolve();\r\n    }).then(() => this.engineGame().evalMove());\r\n  };\r\n\r\n  engineGame = (options) => {\r\n    options = options || {};\r\n\r\n    /// We can load Stockfish via Web Workers or via STOCKFISH() if loaded from a <script> tag.\r\n    let engine =\r\n      typeof STOCKFISH === \"function\"\r\n        ? STOCKFISH()\r\n        : new Worker(options.stockfishjs || \"stockfish.js\");\r\n    let announced_game_over;\r\n\r\n    setInterval(() => {\r\n      if (announced_game_over) {\r\n        return;\r\n      }\r\n      if (this.props.game.isGameOver()) {\r\n        announced_game_over = true;\r\n      }\r\n    }, 500);\r\n\r\n    const evalMove = () => {\r\n      if (!this.props.game.isGameOver()) {\r\n        engine.postMessage(\"ucinewgame\");\r\n        engine.postMessage(\"position fen \" + this.state.fen);\r\n        engine.postMessage(\"eval\");\r\n      }\r\n    };\r\n\r\n    engine.onmessage = (event) => {\r\n      let line;\r\n\r\n      if (event && typeof event === \"object\") {\r\n        line = event.data;\r\n      } else {\r\n        line = event;\r\n      }\r\n      if (line.substr(0, \"Total Evaluation\".length) === \"Total Evaluation\") {\r\n        let score = parseFloat(line.substr(18).substr(0, 4));\r\n        if (this.state.team === \"black\") score = score * -1;\r\n        this.sendRating(score, this.state.fen);\r\n      }\r\n    };\r\n\r\n    return {\r\n      start: function () {\r\n        engine.postMessage(\"ucinewgame\");\r\n        engine.postMessage(\"isready\");\r\n        announced_game_over = false;\r\n      },\r\n      evalMove: function () {\r\n        evalMove();\r\n      },\r\n    };\r\n  };\r\n\r\n\r\n  render() {\r\n\r\n    let status = (this.state.turn ? \"Your\" : \"Not Your\")\r\n\r\n    let team;\r\n    switch (this.state.team) {\r\n      case \"white\":\r\n        team = \"White\"\r\n        break;\r\n      case \"black\":\r\n        team = \"Black\"\r\n        break;\r\n      default:\r\n        team = \"Spectating\"\r\n    }\r\n    \r\n    const startGame = (isHost) => {\r\n      if (isHost) return (<button onClick = {this.props.socket.emit(\"start_game\")}>Start</button>);\r\n    }\r\n\r\n    return (\r\n      <GameWrapper>\r\n      <div ref={this.width}>\r\n        <Chessboard\r\n          id=\"board!\"\r\n          position={this.state.fen}\r\n          width={this.width.current.offsetWidth}\r\n          onDrop={this.onDrop}\r\n          boardStyle={boardStyle}\r\n          orientation={this.state.team}\r\n        />\r\n        </div>\r\n        <button value=\"white\" onClick={e => this.joinTeam(e.target.value, true)} >Join White Team</button>\r\n        <button value=\"black\" onClick={e => this.joinTeam(e.target.value, false)} >Join Black Team</button>\r\n        <div>{startGame(this.props.host)}</div>\r\n        <h1>{team} Player</h1>\r\n        <h1>{status} Turn </h1>\r\n      </GameWrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n\r\nconst boardStyle = {\r\n  borderRadius: \"5px\",\r\n  boxShadow: `0 5px 15px rgba(0, 0, 0, 0.5)`\r\n};"],"mappings":";AAAA,OAAOA,UAAU,MAAM,eAAe;AACtC,SAAQC,KAAK,EAAEC,SAAS,QAAQ,OAAO;AACvC,SAAQC,OAAO,QAAO,qBAAqB;AAC3C,OAAOC,MAAM,MAAM,mBAAmB;AAAC;AAEvC,MAAMC,SAAS,GAAGC,MAAM,CAACD,SAAS;AAElC,MAAME,WAAW,GAAGH,MAAM,CAACD,OAAO,CAAE;AACpC;AACA,CAAC;AAAC,KAFII,WAAW;AAIjB,MAAMC,YAAY,GAAGJ,MAAM,CAACK,GAAI;AAChC;AACA,CAAC;AAED,MAAMC,IAAI,SAASR,SAAS,CAAC;EAC3BS,WAAW,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IAAC,KA0BfC,UAAU,GAAG,CAACC,MAAM,EAAEC,QAAQ,KAAK;MACjC,IAAI,CAACH,KAAK,CAACI,MAAM,CAACC,IAAI,CAAC,aAAa,EAAG;QAAEH,MAAM,EAAEA,MAAM;QAAEC,QAAQ,EAAEA,QAAQ;QAAEG,QAAQ,EAAE,IAAI,CAACN,KAAK,CAACM;MAAS,CAAC,CAAE;IAChH,CAAC;IAAA,KAEDC,QAAQ,GAAIC,IAAI,IAAK;MACnB,IAAI,CAACR,KAAK,CAACI,MAAM,CAACC,IAAI,CAAC,WAAW,EAAEG,IAAI,CAAC;MACzC,IAAI,CAACC,QAAQ,CAAC;QAAED,IAAI,EAAEA;MAAK,CAAC,CAAC;IAC/B,CAAC;IAAA,KAGDE,MAAM,GAAG,QAAoC;MAAA,IAAnC;QAAEC,YAAY;QAAEC;MAAa,CAAC;MACtC,IAAI,CAAC,IAAI,CAACC,KAAK,CAACC,IAAI,EAAE;MACtB,MAAMC,IAAI,GAAG,IAAI,CAACf,KAAK,CAACgB,IAAI,CAACD,IAAI,CAAC;QAAEE,IAAI,EAAEN,YAAY;QAAEO,EAAE,EAAEN;MAAa,CAAC,CAAC;MAC3E,IAAIG,IAAI,KAAK,IAAI,EAAE,OAAO,CAAC;;MAE3B;MACA,IAAI,CAACN,QAAQ,CAAC;QAAEU,GAAG,EAAE,IAAI,CAACnB,KAAK,CAACgB,IAAI,CAACG,GAAG;MAAG,CAAC,CAAC;MAE7C,IAAI,CAACnB,KAAK,CAACgB,IAAI,CAACI,IAAI,EAAE;MAEtB,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;QAC9BA,OAAO,EAAE;MACX,CAAC,CAAC,CAACC,IAAI,CAAC,MAAM,IAAI,CAACC,UAAU,EAAE,CAACC,QAAQ,EAAE,CAAC;IAC7C,CAAC;IAAA,KAEDD,UAAU,GAAIE,OAAO,IAAK;MACxBA,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;;MAEvB;MACA,IAAIC,MAAM,GACR,OAAOlC,SAAS,KAAK,UAAU,GAC3BA,SAAS,EAAE,GACX,IAAImC,MAAM,CAACF,OAAO,CAACG,WAAW,IAAI,cAAc,CAAC;MACvD,IAAIC,mBAAmB;MAEvBC,WAAW,CAAC,MAAM;QAChB,IAAID,mBAAmB,EAAE;UACvB;QACF;QACA,IAAI,IAAI,CAAC9B,KAAK,CAACgB,IAAI,CAACgB,UAAU,EAAE,EAAE;UAChCF,mBAAmB,GAAG,IAAI;QAC5B;MACF,CAAC,EAAE,GAAG,CAAC;MAEP,MAAML,QAAQ,GAAG,MAAM;QACrB,IAAI,CAAC,IAAI,CAACzB,KAAK,CAACgB,IAAI,CAACgB,UAAU,EAAE,EAAE;UACjCL,MAAM,CAACM,WAAW,CAAC,YAAY,CAAC;UAChCN,MAAM,CAACM,WAAW,CAAC,eAAe,GAAG,IAAI,CAACpB,KAAK,CAACM,GAAG,CAAC;UACpDQ,MAAM,CAACM,WAAW,CAAC,MAAM,CAAC;QAC5B;MACF,CAAC;MAEDN,MAAM,CAACO,SAAS,GAAIC,KAAK,IAAK;QAC5B,IAAIC,IAAI;QAER,IAAID,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;UACtCC,IAAI,GAAGD,KAAK,CAACE,IAAI;QACnB,CAAC,MAAM;UACLD,IAAI,GAAGD,KAAK;QACd;QACA,IAAIC,IAAI,CAACE,MAAM,CAAC,CAAC,EAAE,kBAAkB,CAACC,MAAM,CAAC,KAAK,kBAAkB,EAAE;UACpE,IAAIC,KAAK,GAAGC,UAAU,CAACL,IAAI,CAACE,MAAM,CAAC,EAAE,CAAC,CAACA,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;UACpD,IAAI,IAAI,CAACzB,KAAK,CAACL,IAAI,KAAK,OAAO,EAAEgC,KAAK,GAAGA,KAAK,GAAG,CAAC,CAAC;UACnD,IAAI,CAACvC,UAAU,CAACuC,KAAK,EAAE,IAAI,CAAC3B,KAAK,CAACM,GAAG,CAAC;QACxC;MACF,CAAC;MAED,OAAO;QACLuB,KAAK,EAAE,YAAY;UACjBf,MAAM,CAACM,WAAW,CAAC,YAAY,CAAC;UAChCN,MAAM,CAACM,WAAW,CAAC,SAAS,CAAC;UAC7BH,mBAAmB,GAAG,KAAK;QAC7B,CAAC;QACDL,QAAQ,EAAE,YAAY;UACpBA,QAAQ,EAAE;QACZ;MACF,CAAC;IACH,CAAC;IAtGC,IAAI,CAACZ,KAAK,GAAG;MACXM,GAAG,EAAE,OAAO;MACZL,IAAI,EAAE,KAAK;MACXN,IAAI,EAAE;IACR,CAAC;IACD,IAAI,CAACmC,KAAK,GAAEtD,KAAK,CAACuD,SAAS,EAAE;IAC7B,IAAI,CAAC3C,UAAU,GAAG,IAAI,CAACA,UAAU,CAAC4C,IAAI,CAAC,IAAI,CAAC;IAC5C,IAAI,CAACnC,MAAM,GAAG,IAAI,CAACA,MAAM,CAACmC,IAAI,CAAC,IAAI,CAAC;IACpC,IAAI,CAACtC,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACsC,IAAI,CAAC,IAAI,CAAC;EAC1C;EAEAC,iBAAiB,GAAG;IAElBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACL,KAAK,CAACM,OAAO,CAACC,WAAW,CAAC;IAE3C,IAAI,CAAClD,KAAK,CAACI,MAAM,CAAC+C,EAAE,CAAC,kBAAkB,EAAGC,OAAO,IAAK;MACpD,IAAI,CAAC3C,QAAQ,CAAC;QAAEU,GAAG,EAAEiC;MAAQ,CAAC,CAAC;MAC/B,IAAI,CAACpD,KAAK,CAACgB,IAAI,CAACqC,IAAI,CAACD,OAAO,CAAC;IAC/B,CAAC,CAAC;IACF,IAAI,CAACpD,KAAK,CAACI,MAAM,CAAC+C,EAAE,CAAC,UAAU,EAAGG,SAAS,IAAK;MAC9C,IAAI,IAAI,CAACzC,KAAK,CAACL,IAAI,KAAK,OAAO,EAAE,IAAI,CAACC,QAAQ,CAAC;QAAEK,IAAI,EAAEwC;MAAU,CAAC,CAAC;MACnE,IAAI,IAAI,CAACzC,KAAK,CAACL,IAAI,KAAK,OAAO,EAAE,IAAI,CAACC,QAAQ,CAAC;QAAEK,IAAI,EAAE,CAACwC;MAAU,CAAC,CAAC;IACtE,CAAC,CAAC;EACJ;EAkFAC,MAAM,GAAG;IAEP,IAAIC,MAAM,GAAI,IAAI,CAAC3C,KAAK,CAACC,IAAI,GAAG,MAAM,GAAG,UAAW;IAEpD,IAAIN,IAAI;IACR,QAAQ,IAAI,CAACK,KAAK,CAACL,IAAI;MACrB,KAAK,OAAO;QACVA,IAAI,GAAG,OAAO;QACd;MACF,KAAK,OAAO;QACVA,IAAI,GAAG,OAAO;QACd;MACF;QACEA,IAAI,GAAG,YAAY;IAAA;IAGvB,MAAMiD,SAAS,GAAIC,MAAM,IAAK;MAC5B,IAAIA,MAAM,EAAE,oBAAQ;QAAQ,OAAO,EAAI,IAAI,CAAC1D,KAAK,CAACI,MAAM,CAACC,IAAI,CAAC,YAAY,CAAE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAe;IAC7F,CAAC;IAED,oBACE,QAAC,WAAW;MAAA,wBACZ;QAAK,GAAG,EAAE,IAAI,CAACsC,KAAM;QAAA,uBACnB,QAAC,UAAU;UACT,EAAE,EAAC,QAAQ;UACX,QAAQ,EAAE,IAAI,CAAC9B,KAAK,CAACM,GAAI;UACzB,KAAK,EAAE,IAAI,CAACwB,KAAK,CAACM,OAAO,CAACC,WAAY;UACtC,MAAM,EAAE,IAAI,CAACxC,MAAO;UACpB,UAAU,EAAEiD,UAAW;UACvB,WAAW,EAAE,IAAI,CAAC9C,KAAK,CAACL;QAAK;UAAA;UAAA;UAAA;QAAA;MAC7B;QAAA;QAAA;QAAA;MAAA,QACI,eACN;QAAQ,KAAK,EAAC,OAAO;QAAC,OAAO,EAAEoD,CAAC,IAAI,IAAI,CAACrD,QAAQ,CAACqD,CAAC,CAACC,MAAM,CAACC,KAAK,EAAE,IAAI,CAAE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAA0B,eAClG;QAAQ,KAAK,EAAC,OAAO;QAAC,OAAO,EAAEF,CAAC,IAAI,IAAI,CAACrD,QAAQ,CAACqD,CAAC,CAACC,MAAM,CAACC,KAAK,EAAE,KAAK,CAAE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAA0B,eACnG;QAAA,UAAML,SAAS,CAAC,IAAI,CAACzD,KAAK,CAAC+D,IAAI;MAAC;QAAA;QAAA;QAAA;MAAA,QAAO,eACvC;QAAA,WAAKvD,IAAI;MAAA;QAAA;QAAA;QAAA;MAAA,QAAa,eACtB;QAAA,WAAKgD,MAAM;MAAA;QAAA;QAAA;QAAA;MAAA,QAAY;IAAA;MAAA;MAAA;MAAA;IAAA,QACX;EAElB;AACF;AAEA,eAAe1D,IAAI;AAEnB,MAAM6D,UAAU,GAAG;EACjBK,YAAY,EAAE,KAAK;EACnBC,SAAS,EAAG;AACd,CAAC;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}