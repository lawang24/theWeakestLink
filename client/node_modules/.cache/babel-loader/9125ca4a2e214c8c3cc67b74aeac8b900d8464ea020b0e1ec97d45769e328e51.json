{"ast":null,"code":"import { squareStyling } from \"./helpers\";\nexport const room_joined_handler = (socket, setRoomCode, setIsWhite) => {\n  socket.on(\"room_joined\", (roomCode, isWhite) => {\n    setRoomCode(roomCode);\n    setIsWhite(isWhite);\n  });\n};\nexport const next_turn_handler = (socket, game, setFen, setIsCheckmate, setGameStarted, setWhiteTurn, setTurn, isWhite, setCanSubmitMove, roomCode, setHistory, setSquareStyles) => {\n  socket.on(\"next_turn\", (worst_fen, nowWhiteTurn, target_square, source_square) => {\n    setFen(worst_fen);\n    game.load(worst_fen);\n    let kingSquare;\n    if (game.inCheck()) {\n      kingSquare = game.board().find(row => row.find(piece => piece.type === 'k' && piece.color === 'w'));\n    }\n    const boardInCheck = game.board();\n    for (let i = 0; i < boardInCheck.length; i++) {\n      kingSquare = boardInCheck[i].find(piece => piece.type === 'k' && piece.color === 'w');\n      if (kingSquare != undefined) break;\n    }\n    console.log(\"hi\" + kingSquare);\n    setSquareStyles(squareStyling(source_square.current, target_square.current));\n\n    // check game conditions\n    if (game.isCheckmate()) {\n      setIsCheckmate(true);\n      setGameStarted(false);\n      setTurn(false);\n      setCanSubmitMove(false);\n      socket.emit(\"stop_game\", roomCode);\n    }\n    // allow the proper players to move \n    else {\n      setWhiteTurn(whiteTurn => !whiteTurn);\n      setTurn(turn => !turn);\n      if (isWhite === nowWhiteTurn) setCanSubmitMove(true);\n    }\n  });\n};\nexport const update_teams_handler = (socket, setWhiteTeam, setBlackTeam) => {\n  socket.on(\"update_white_team\", white_team => {\n    setWhiteTeam(new Map(JSON.parse(white_team)));\n  });\n  socket.on(\"update_black_team\", black_team => {\n    setBlackTeam(new Map(JSON.parse(black_team)));\n  });\n};\nexport const begin_game_handler = (socket, game, setWhiteTurn, setGameStarted, setFen, setIsCheckmate, setTimeOut, isWhite, setTurn, setCanSubmitMove) => {\n  socket.on(\"begin_game\", () => {\n    setWhiteTurn(true);\n    setGameStarted(true);\n    setFen(\"start\");\n    setIsCheckmate(false);\n    setTimeOut(false);\n    if (isWhite) {\n      setTurn(true);\n      setCanSubmitMove(true);\n    }\n    game.reset(); // restart the game\n  });\n};\n\nexport const timer_handler = (socket, setGameStarted, setTimeOut, setTurn, setCanSubmitMove, roomCode, setWhiteTime, setBlackTime) => {\n  socket.on(\"time_out\", () => {\n    setGameStarted(false);\n    setTimeOut(true);\n    setTurn(false);\n    setCanSubmitMove(false);\n    socket.emit(\"stop_game\", roomCode);\n  });\n  socket.on(\"update_timer\", timer => {\n    setWhiteTime(timer[0]);\n    setBlackTime(timer[1]);\n  });\n};\nexport function roomListeners(socket, setisHomescreen) {\n  socket.on(\"yes_room\", () => {\n    setisHomescreen(false);\n  });\n  socket.on(\"no_room\", () => {\n    alert(\"Game Not Found\");\n    console.log(\"alert!\");\n  });\n}\n;","map":{"version":3,"names":["squareStyling","room_joined_handler","socket","setRoomCode","setIsWhite","on","roomCode","isWhite","next_turn_handler","game","setFen","setIsCheckmate","setGameStarted","setWhiteTurn","setTurn","setCanSubmitMove","setHistory","setSquareStyles","worst_fen","nowWhiteTurn","target_square","source_square","load","kingSquare","inCheck","board","find","row","piece","type","color","boardInCheck","i","length","undefined","console","log","current","isCheckmate","emit","whiteTurn","turn","update_teams_handler","setWhiteTeam","setBlackTeam","white_team","Map","JSON","parse","black_team","begin_game_handler","setTimeOut","reset","timer_handler","setWhiteTime","setBlackTime","timer","roomListeners","setisHomescreen","alert"],"sources":["C:/Users/catas/Desktop/Basic Chess Game/client/src/handlers/socket_handlers.js"],"sourcesContent":["import { squareStyling } from \"./helpers\";\r\n\r\nexport const room_joined_handler = (socket, setRoomCode, setIsWhite) => {\r\n  socket.on(\"room_joined\", (roomCode, isWhite) => {\r\n    setRoomCode(roomCode);\r\n    setIsWhite(isWhite);\r\n  });\r\n};\r\n\r\nexport const next_turn_handler = (socket, game, setFen, setIsCheckmate, setGameStarted,\r\n  setWhiteTurn, setTurn, isWhite, setCanSubmitMove, roomCode, setHistory, setSquareStyles) => {\r\n\r\n  socket.on(\"next_turn\", (worst_fen, nowWhiteTurn, target_square, source_square) => {\r\n    setFen(worst_fen);\r\n    game.load(worst_fen);\r\n\r\n    let kingSquare;\r\n\r\n    if (game.inCheck()) {\r\n      kingSquare = game.board().find(row => row.find(piece => (piece.type === 'k' && piece.color === 'w')))\r\n    }\r\n\r\n    const boardInCheck = game.board()\r\n\r\n    for (let i = 0; i < boardInCheck.length; i++) {\r\n      kingSquare = boardInCheck[i].find(piece => (piece.type === 'k' && piece.color === 'w'))\r\n      if (kingSquare!=undefined) break;\r\n    }\r\n    console.log(\"hi\" + kingSquare)\r\n\r\n    setSquareStyles(squareStyling(source_square.current, target_square.current));\r\n\r\n    // check game conditions\r\n    if (game.isCheckmate()) {\r\n      setIsCheckmate(true);\r\n      setGameStarted(false);\r\n      setTurn(false);\r\n      setCanSubmitMove(false);\r\n      socket.emit(\"stop_game\", roomCode);\r\n    }\r\n    // allow the proper players to move \r\n    else {\r\n      setWhiteTurn((whiteTurn) => !whiteTurn);\r\n      setTurn((turn) => !turn);\r\n      if (isWhite === nowWhiteTurn) setCanSubmitMove(true);\r\n    }\r\n\r\n  });\r\n};\r\n\r\nexport const update_teams_handler = (socket, setWhiteTeam, setBlackTeam) => {\r\n  socket.on(\"update_white_team\", (white_team) => {\r\n    setWhiteTeam(new Map(JSON.parse(white_team)));\r\n  });\r\n\r\n  socket.on(\"update_black_team\", (black_team) => {\r\n    setBlackTeam(new Map(JSON.parse(black_team)));\r\n  });\r\n};\r\n\r\nexport const begin_game_handler = (socket, game, setWhiteTurn, setGameStarted, setFen, setIsCheckmate,\r\n  setTimeOut, isWhite, setTurn, setCanSubmitMove) => {\r\n\r\n  socket.on(\"begin_game\", () => {\r\n    setWhiteTurn(true);\r\n    setGameStarted(true);\r\n    setFen(\"start\");\r\n    setIsCheckmate(false);\r\n    setTimeOut(false);\r\n    if (isWhite) {\r\n      setTurn(true);\r\n      setCanSubmitMove(true);\r\n    }\r\n    game.reset(); // restart the game\r\n  });\r\n\r\n};\r\n\r\nexport const timer_handler = (socket, setGameStarted, setTimeOut, setTurn, setCanSubmitMove,\r\n  roomCode, setWhiteTime, setBlackTime) => {\r\n\r\n  socket.on(\"time_out\", () => {\r\n    setGameStarted(false);\r\n    setTimeOut(true);\r\n    setTurn(false);\r\n    setCanSubmitMove(false);\r\n    socket.emit(\"stop_game\", roomCode);\r\n  });\r\n\r\n  socket.on(\"update_timer\", (timer) => {\r\n    setWhiteTime(timer[0]);\r\n    setBlackTime(timer[1]);\r\n  });\r\n\r\n};\r\n\r\nexport function roomListeners(socket, setisHomescreen) {\r\n\r\n  socket.on(\"yes_room\", () => {\r\n    setisHomescreen(false);\r\n  });\r\n\r\n  socket.on(\"no_room\", () => {\r\n    alert(\"Game Not Found\");\r\n    console.log(\"alert!\");\r\n  });\r\n\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}