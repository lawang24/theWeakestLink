{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\catas\\\\Desktop\\\\Basic Chess Game\\\\client\\\\src\\\\main_pages\\\\gameFunctional.js\",\n  _s = $RefreshSig$();\nimport Chessboard from \"chessboardjsx\";\nimport { Chess } from \"chess.js\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { Logo, SettingButton } from \"../styled_components\";\nimport { GameWrapper, RoomCode as RoomCodeButton, TeamName, GameplaySection, NonChessboard } from \"../styled_components/gameComponents\";\nimport { TeamSection } from \"../styled_components/gameComponents\";\nimport { Teams, Ratings, Gameover } from \"../items/display_components.js\";\nimport { GameControls } from \"../items/interactive_components\";\nimport { CountdownTimer } from \"../items/client_clock.js\";\nimport { usePlayerContext } from '../contexts/PlayerContext';\nimport { begin_game_handler, next_turn_handler, room_joined_handler, timer_handler, update_teams_handler } from \"../handlers/socket_handlers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STOCKFISH = window.STOCKFISH;\nconst game = new Chess();\nconst Game = () => {\n  _s();\n  const [fen, setFen] = useState(\"start\");\n  const [turn, setTurn] = useState(false);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [canSubmitMove, setCanSubmitMove] = useState(false);\n  const [whiteTurn, setWhiteTurn] = useState(false);\n  const [isCheckmate, setIsCheckmate] = useState(false);\n  const [timeOut, setTimeOut] = useState(false);\n  const [whiteTime, setWhiteTime] = useState(50);\n  const [blackTime, setBlackTime] = useState(50);\n  const [whiteTeam, setWhiteTeam] = useState(new Map());\n  const [blackTeam, setBlackTeam] = useState(new Map());\n  const proposedMove = useRef(\"\");\n  const {\n    socket,\n    roomCode,\n    setRoomCode,\n    host,\n    isWhite,\n    setIsWhite,\n    username\n  } = usePlayerContext();\n  useEffect(() => {\n    room_joined_handler(socket, setRoomCode, setIsWhite);\n    next_turn_handler(socket, game, setFen, setIsCheckmate, setGameStarted, setWhiteTurn, setTurn, isWhite, setCanSubmitMove, roomCode);\n    update_teams_handler(socket, setWhiteTeam, setBlackTeam);\n    begin_game_handler(socket, game, setWhiteTurn, setGameStarted, setFen, setIsCheckmate, setTimeOut, isWhite, setTurn, setCanSubmitMove);\n    timer_handler(socket, setGameStarted, setTimeOut, setTurn, setCanSubmitMove, roomCode, setWhiteTime, setBlackTime);\n    return () => {\n      socket.removeAllListeners();\n    };\n  }, [isCheckmate, isWhite, roomCode, setIsWhite, setRoomCode, socket]);\n\n  // send the client's rating to the server\n  const sendRating = (rating, position) => {\n    socket.emit(\"send_rating\", rating, position, roomCode, isWhite, username);\n  };\n  const changeTeam = () => {\n    console.log(roomCode);\n    socket.emit(\"change_team\", isWhite, roomCode, username);\n    setIsWhite(isWhite => !isWhite);\n  };\n  const onDrop = _ref => {\n    let {\n      sourceSquare,\n      targetSquare\n    } = _ref;\n    if (!turn || !canSubmitMove) return;\n    const move = game.move({\n      from: sourceSquare,\n      to: targetSquare\n    });\n    if (move === null) return; // illegal move  \n    console.log(game.fen());\n    // grab player proposed position and show it\n    proposedMove.current = game.fen();\n    setFen(proposedMove.current);\n    setCanSubmitMove(false);\n    game.undo();\n    return new Promise(resolve => {\n      resolve();\n    }).then(() => engineGame().evalMove());\n  };\n  const engineGame = options => {\n    options = options || {};\n\n    /// We can load Stockfish via Web Workers or via STOCKFISH() if loaded from a <script> tag.\n    let engine = typeof STOCKFISH === \"function\" ? STOCKFISH() : new Worker(options.stockfishjs || \"stockfish.js\");\n\n    //let announced_game_over;\n\n    // setInterval(() => {\n    //   if (announced_game_over) {\n    //     return;\n    //   }\n    //   if (game.isGameOver()) {\n    //     announced_game_over = true;\n    //   }\n    // }, 500);\n\n    const evalMove = () => {\n      if (!game.isGameOver()) {\n        engine.postMessage(\"ucinewgame\");\n        console.log(\"proposedMove.current:\" + proposedMove.current);\n        engine.postMessage(\"position fen \" + proposedMove.current);\n        engine.postMessage(\"eval\");\n      }\n    };\n    engine.onmessage = event => {\n      let line;\n      if (event && typeof event === \"object\") {\n        line = event.data;\n      } else {\n        line = event;\n      }\n      if (line.substr(0, \"Total Evaluation\".length) === \"Total Evaluation\") {\n        let score = parseFloat(line.substr(18).substr(0, 4));\n        if (!isWhite) score = score * -1;\n        sendRating(score, proposedMove.current);\n      }\n    };\n    return {\n      start: function () {\n        engine.postMessage(\"ucinewgame\");\n        engine.postMessage(\"isready\");\n        // announced_game_over = false;\n      },\n\n      evalMove: function () {\n        evalMove();\n      }\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(GameWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Chessboard, {\n      id: \"board!\",\n      position: fen,\n      onDrop: onDrop,\n      boardStyle: boardStyle,\n      orientation: isWhite ? \"white\" : \"black\",\n      calcWidth: screen => Math.min(screen.screenHeight * .9, screen.screenWidth * .53)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NonChessboard, {\n      children: [/*#__PURE__*/_jsxDEV(Logo, {\n        style: {\n          width: \"50%\",\n          height: \"auto\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GameplaySection, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            \"flex-flow\": \"row wrap\",\n            \"justify-content\": \"center\",\n            height: \"fit-content\",\n            width: \"100%\",\n            \"margin-top\": \"17%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(TeamSection, {\n            children: [/*#__PURE__*/_jsxDEV(TeamName, {\n              color: \"white\",\n              children: \"WHITE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Teams, {\n              team: whiteTeam,\n              isWhite: true,\n              gameStarted: gameStarted\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TeamSection, {\n            children: [/*#__PURE__*/_jsxDEV(TeamName, {\n              children: \"BLACK\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Teams, {\n              team: blackTeam,\n              isWhite: false,\n              gameStarted: gameStarted\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Ratings, {\n          team: isWhite ? whiteTeam : blackTeam,\n          gameStarted: gameStarted\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }, this), !gameStarted && /*#__PURE__*/_jsxDEV(GameControls, {\n          socket: socket,\n          changeTeam: changeTeam,\n          roomCode: roomCode,\n          host: host\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 28\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          style: {\n            color: \"#FFFFFF\"\n          },\n          children: [turn ? \"Your\" : \"Not Your\", \" Turn\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          style: {\n            color: \"#FFFFFF\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Gameover, {\n            isCheckmate: isCheckmate,\n            timeOut: timeOut,\n            whiteTurn: whiteTurn\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            height: \"8%\",\n            width: \"30%\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(CountdownTimer, {\n            totalSeconds: whiteTime,\n            isRunning: whiteTurn && gameStarted\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CountdownTimer, {\n            totalSeconds: blackTime,\n            isRunning: !whiteTurn && gameStarted\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        id: \"footer\",\n        style: {\n          display: \"flex\",\n          width: \"100%\",\n          margin: \"0 0 34px 34px\",\n          'justify-content': 'start'\n        },\n        children: [/*#__PURE__*/_jsxDEV(SettingButton, {\n          style: {\n            height: \"48px\",\n            width: \"48px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RoomCodeButton, {\n          children: [\"ROOM: \", roomCode]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"ZXmrs153tLloRCoP/xDEU7vhoOA=\", false, function () {\n  return [usePlayerContext];\n});\n_c = Game;\nexport default Game;\nconst boardStyle = {\n  border: \"10px solid #868BAC\",\n  boxShadow: `0 5px 15px rgba(0, 0, 0, 0.5)`,\n  \"border-radius\": \"5px\",\n  position: \"relative\",\n  left: \"5%\"\n};\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["Chessboard","Chess","useState","useEffect","useRef","Logo","SettingButton","GameWrapper","RoomCode","RoomCodeButton","TeamName","GameplaySection","NonChessboard","TeamSection","Teams","Ratings","Gameover","GameControls","CountdownTimer","usePlayerContext","begin_game_handler","next_turn_handler","room_joined_handler","timer_handler","update_teams_handler","STOCKFISH","window","game","Game","fen","setFen","turn","setTurn","gameStarted","setGameStarted","canSubmitMove","setCanSubmitMove","whiteTurn","setWhiteTurn","isCheckmate","setIsCheckmate","timeOut","setTimeOut","whiteTime","setWhiteTime","blackTime","setBlackTime","whiteTeam","setWhiteTeam","Map","blackTeam","setBlackTeam","proposedMove","socket","roomCode","setRoomCode","host","isWhite","setIsWhite","username","removeAllListeners","sendRating","rating","position","emit","changeTeam","console","log","onDrop","sourceSquare","targetSquare","move","from","to","current","undo","Promise","resolve","then","engineGame","evalMove","options","engine","Worker","stockfishjs","isGameOver","postMessage","onmessage","event","line","data","substr","length","score","parseFloat","start","boardStyle","screen","Math","min","screenHeight","screenWidth","width","height","display","color","justifyContent","alignItems","margin","border","boxShadow","left"],"sources":["C:/Users/catas/Desktop/Basic Chess Game/client/src/main_pages/gameFunctional.js"],"sourcesContent":["import Chessboard from \"chessboardjsx\";\r\nimport { Chess } from \"chess.js\";\r\nimport { useState, useEffect, useRef } from \"react\";\r\nimport { Logo, SettingButton } from \"../styled_components\"\r\nimport { GameWrapper, RoomCode as RoomCodeButton, TeamName, GameplaySection, NonChessboard } from \"../styled_components/gameComponents\"\r\nimport { TeamSection } from \"../styled_components/gameComponents\";\r\nimport { Teams, Ratings, Gameover } from \"../items/display_components.js\";\r\nimport { GameControls } from \"../items/interactive_components\";\r\nimport { CountdownTimer } from \"../items/client_clock.js\";\r\nimport { usePlayerContext } from '../contexts/PlayerContext';\r\nimport {\r\n  begin_game_handler, next_turn_handler, room_joined_handler,\r\n  timer_handler, update_teams_handler\r\n} from \"../handlers/socket_handlers\";\r\n\r\nconst STOCKFISH = window.STOCKFISH;\r\nconst game = new Chess();\r\n\r\nconst Game = () => {\r\n  const [fen, setFen] = useState(\"start\");\r\n  const [turn, setTurn] = useState(false);\r\n  const [gameStarted, setGameStarted] = useState(false);\r\n  const [canSubmitMove, setCanSubmitMove] = useState(false);\r\n  const [whiteTurn, setWhiteTurn] = useState(false);\r\n  const [isCheckmate, setIsCheckmate] = useState(false);\r\n  const [timeOut, setTimeOut] = useState(false);\r\n  const [whiteTime, setWhiteTime] = useState(50);\r\n  const [blackTime, setBlackTime] = useState(50);\r\n  const [whiteTeam, setWhiteTeam] = useState(new Map());\r\n  const [blackTeam, setBlackTeam] = useState(new Map());\r\n  const proposedMove = useRef(\"\");\r\n\r\n  const { socket,\r\n    roomCode,\r\n    setRoomCode,\r\n    host,\r\n    isWhite,\r\n    setIsWhite,\r\n    username,\r\n  } = usePlayerContext();\r\n\r\n  \r\n\r\n  useEffect(() => {\r\n\r\n    room_joined_handler(socket, setRoomCode, setIsWhite);\r\n\r\n    next_turn_handler(socket, game, setFen, setIsCheckmate, setGameStarted,\r\n      setWhiteTurn, setTurn, isWhite, setCanSubmitMove, roomCode);\r\n\r\n    update_teams_handler(socket, setWhiteTeam, setBlackTeam);\r\n\r\n    begin_game_handler(socket, game, setWhiteTurn, setGameStarted, setFen, setIsCheckmate,\r\n      setTimeOut, isWhite, setTurn, setCanSubmitMove);\r\n\r\n    timer_handler(socket, setGameStarted, setTimeOut, setTurn, setCanSubmitMove, roomCode, setWhiteTime, setBlackTime);\r\n\r\n    return () => {\r\n      socket.removeAllListeners();\r\n    }\r\n\r\n  }, [isCheckmate, isWhite, roomCode, setIsWhite, setRoomCode, socket]);\r\n\r\n  // send the client's rating to the server\r\n  const sendRating = (rating, position) => {\r\n    socket.emit(\"send_rating\", rating, position, roomCode, isWhite, username);\r\n  };\r\n\r\n  const changeTeam = () => {\r\n    console.log(roomCode);\r\n    socket.emit(\"change_team\", isWhite, roomCode, username);\r\n    setIsWhite((isWhite) => !isWhite);\r\n  }\r\n\r\n  const onDrop = ({ sourceSquare, targetSquare }) => {\r\n\r\n    if (!turn || !canSubmitMove) return;\r\n    const move = game.move({ from: sourceSquare, to: targetSquare })\r\n    if (move === null) return; // illegal move  \r\n    console.log(game.fen());\r\n    // grab player proposed position and show it\r\n    proposedMove.current = game.fen();\r\n    setFen(proposedMove.current);\r\n    setCanSubmitMove(false);\r\n\r\n    game.undo();\r\n\r\n    return new Promise((resolve) => {\r\n      resolve();\r\n    }).then(() => engineGame().evalMove());\r\n  };\r\n\r\n  const engineGame = (options) => {\r\n    options = options || {};\r\n\r\n    /// We can load Stockfish via Web Workers or via STOCKFISH() if loaded from a <script> tag.\r\n    let engine =\r\n      typeof STOCKFISH === \"function\"\r\n        ? STOCKFISH()\r\n        : new Worker(options.stockfishjs || \"stockfish.js\");\r\n\r\n    //let announced_game_over;\r\n\r\n    // setInterval(() => {\r\n    //   if (announced_game_over) {\r\n    //     return;\r\n    //   }\r\n    //   if (game.isGameOver()) {\r\n    //     announced_game_over = true;\r\n    //   }\r\n    // }, 500);\r\n\r\n    const evalMove = () => {\r\n      if (!game.isGameOver()) {\r\n        engine.postMessage(\"ucinewgame\");\r\n        console.log(\"proposedMove.current:\" + proposedMove.current)\r\n        engine.postMessage(\"position fen \" + proposedMove.current);\r\n        engine.postMessage(\"eval\");\r\n      }\r\n    };\r\n\r\n    engine.onmessage = (event) => {\r\n      let line;\r\n\r\n      if (event && typeof event === \"object\") {\r\n        line = event.data;\r\n      } else {\r\n        line = event;\r\n      }\r\n      if (line.substr(0, \"Total Evaluation\".length) === \"Total Evaluation\") {\r\n        let score = parseFloat(line.substr(18).substr(0, 4));\r\n        if (!isWhite) score = score * -1;\r\n        sendRating(score, proposedMove.current);\r\n      }\r\n    };\r\n\r\n    return {\r\n      start: function () {\r\n        engine.postMessage(\"ucinewgame\");\r\n        engine.postMessage(\"isready\");\r\n        // announced_game_over = false;\r\n      },\r\n      evalMove: function () {\r\n        evalMove();\r\n      },\r\n    };\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <GameWrapper>\r\n      <Chessboard\r\n        id=\"board!\"\r\n        position={fen}\r\n        onDrop={onDrop}\r\n        boardStyle={boardStyle}\r\n        orientation={isWhite ? \"white\" : \"black\"}\r\n        calcWidth={(screen) => Math.min(screen.screenHeight * .9, screen.screenWidth * .53)}\r\n      />\r\n\r\n      <NonChessboard>\r\n\r\n        <Logo style={{ width: \"50%\", height: \"auto\" }}></Logo>\r\n\r\n        <GameplaySection>\r\n          <div style={{ display: \"flex\", \"flex-flow\": \"row wrap\", \"justify-content\": \"center\", height: \"fit-content\", width: \"100%\", \"margin-top\": \"17%\" }}>\r\n            <TeamSection>\r\n              <TeamName color=\"white\">WHITE</TeamName>\r\n              <Teams team={whiteTeam} isWhite={true} gameStarted={gameStarted} />\r\n            </TeamSection>\r\n            <TeamSection>\r\n              <TeamName>BLACK</TeamName>\r\n              <Teams team={blackTeam} isWhite={false} gameStarted={gameStarted} />\r\n            </TeamSection>\r\n          </div>\r\n\r\n          <Ratings team={isWhite ? whiteTeam : blackTeam} gameStarted={gameStarted} />\r\n\r\n          {!gameStarted && <GameControls socket={socket} changeTeam={changeTeam} roomCode={roomCode} host={host} />}\r\n\r\n          <h1 style={{ color: \"#FFFFFF\" }}>{turn ? \"Your\" : \"Not Your\"} Turn</h1>\r\n          <h1 style={{ color: \"#FFFFFF\" }}>\r\n            <Gameover isCheckmate={isCheckmate} timeOut={timeOut} whiteTurn={whiteTurn} />\r\n          </h1>\r\n\r\n          <div style={{ display: \"flex\", height: \"8%\", width: \"30%\", justifyContent: \"center\", alignItems: \"center\" }}>\r\n            <CountdownTimer totalSeconds={whiteTime} isRunning={(whiteTurn && gameStarted)} />\r\n            <CountdownTimer totalSeconds={blackTime} isRunning={(!whiteTurn && gameStarted)} />\r\n          </div>\r\n        </GameplaySection>\r\n\r\n        <section id=\"footer\" style={{ display: \"flex\", width: \"100%\", margin: \"0 0 34px 34px\", 'justify-content': 'start' }}>\r\n          <SettingButton style={{ height: \"48px\", width: \"48px\", }}></SettingButton>\r\n          <RoomCodeButton>ROOM: {roomCode}</RoomCodeButton>\r\n        </section>\r\n\r\n        </NonChessboard>\r\n    </GameWrapper>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n\r\nconst boardStyle = {\r\n  border: \"10px solid #868BAC\",\r\n  boxShadow: `0 5px 15px rgba(0, 0, 0, 0.5)`,\r\n  \"border-radius\": \"5px\",\r\n  position: \"relative\",\r\n  left: \"5%\"\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}