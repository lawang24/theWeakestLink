{"ast":null,"code":"var _jsxFileName = \"/Users/lawrence/Documents/Projects/theWeakestLink/client/src/main_pages/gameFunctional.js\";\nimport Chessboard from \"chessboardjsx\";\nimport { Chess } from \"chess.js\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { SettingButton } from \"../styled_components/settingButton\";\nimport { Logo } from \"../styled_components\";\nimport { GameWrapper, RoomCode as RoomCodeButton, NonChessboard } from \"../styled_components/gameComponents\";\nimport { Ratings, Gameover } from \"../items/display_components.js\";\nimport { GameControls } from \"../items/interactive_components\";\nimport { MatchClock } from \"../items/matchClock.js\";\nimport { usePlayerContext } from '../contexts/PlayerContext';\nimport { begin_game_handler, next_turn_handler, room_joined_handler, timer_handler, update_teams_handler } from \"../handlers/socket_handlers.js\";\nimport { sendRating, squareStyling } from \"../handlers/helpers.js\";\nimport TeamRoster from \"../items/teamRoster.js\";\nimport styled from 'styled-components';\n\n// const Footer = styled.div`\n//   display: flex;\n//   width: 100%;\n//   height: 100%;\n//   margin: 0 0 34px 34px;\n//   justify-content: start;\n//   gap: 5%;\n//   grid-area: logo;\n// `;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Footer = styled.div`\n  background-color: red;\n`;\nconst TestButton = styled.div`\n  background-color: green;\n`;\n_c = TestButton;\nconsole.log(\"Game functional loaded\");\nconst engine = new Worker(\"stockfish.js\");\nconst game = new Chess();\nconst Game = () => {\n  // const [fen, setFen] = useState(\"start\");\n  // const [turn, setTurn] = useState(false);\n  // const [gameStarted, setGameStarted] = useState(false);\n  // const [canSubmitMove, setCanSubmitMove] = useState(false);\n  // const [whiteTurn, setWhiteTurn] = useState(false);\n  // const [isCheckmate, setIsCheckmate] = useState(false);\n  // const [timeOut, setTimeOut] = useState(false);\n  // const [whiteTime, setWhiteTime] = useState(50);\n  // const [blackTime, setBlackTime] = useState(50);\n  // const [whiteTeam, setWhiteTeam] = useState(new Map());\n  // const [blackTeam, setBlackTeam] = useState(new Map());\n  // const [history, setHistory] = useState([]);\n  // const [squareStyles, setSquareStyles] = useState({});\n  // const proposedMove = useRef(\"\");\n  // const target = useRef(\"\");\n  // const source = useRef(\"\");\n\n  // const { socket,\n  //   roomCode,\n  //   setRoomCode,\n  //   host,\n  //   isWhite,\n  //   setIsWhite,\n  //   username,\n  // } = usePlayerContext();\n\n  // // core logic handler mounts\n  // useEffect(() => {\n  //   room_joined_handler(socket, setRoomCode, setIsWhite);\n\n  //   next_turn_handler(socket, game, setFen, setIsCheckmate, setGameStarted,\n  //     setWhiteTurn, setTurn, isWhite, setCanSubmitMove, roomCode, setHistory, setSquareStyles);\n\n  //   update_teams_handler(socket, setWhiteTeam, setBlackTeam);\n\n  //   begin_game_handler(socket, game, setWhiteTurn, setGameStarted, setFen, setIsCheckmate,\n  //     setTimeOut, isWhite, setTurn, setCanSubmitMove, setSquareStyles);\n\n  //   timer_handler(socket, setGameStarted, setTimeOut, setTurn, setCanSubmitMove, roomCode, setWhiteTime, setBlackTime);\n\n  //   return () => {\n  //     socket.removeAllListeners();\n  //   }\n\n  // }, [isWhite, roomCode, setIsWhite, setRoomCode, socket]);\n\n  // const engineGame = () => {\n\n  //   const evalMove = () => {\n  //     engine.postMessage(\"ucinewgame\");\n  //     console.log(\"proposedMove.current:\" + proposedMove.current)\n  //     engine.postMessage(\"position fen \" + proposedMove.current);\n  //     engine.postMessage(\"go depth 5\")\n\n  //     // engine.postMessage(\"eval\");\n  //     // if (!game.isGameOver()) {\n  //     //   engine.postMessage(\"ucinewgame\");\n  //     //   console.log(\"proposedMove.current:\" + proposedMove.current)\n  //     //   engine.postMessage(\"position fen \" + proposedMove.current);\n  //     //   engine.postMessage(\"eval\");\n  //     // }\n  //   };\n\n  //   engine.onmessage = (event) => {\n  //     let line;\n  //     console.log(\"trigger\")\n\n  //     if (event && typeof event === \"object\") {\n  //       line = event.data;\n  //     } else {\n  //       line = event;\n  //     }\n  //     console.log(line);\n  //     if (line.substring(0, 8) === \"bestmove\") {\n\n  //       let score = line.substring(line.indexOf(\"score\") + 6);\n  //       console.log(score)\n  //       // if (!isWhite) score = score * -1;\n  //       sendRating(socket, score, proposedMove.current, roomCode, isWhite, username, target, source);\n  //     }\n  //   };\n\n  //   return {\n  //     start: function () {\n  //       console.log(\"starting\")\n  //       engine.postMessage(\"ucinewgame\");\n  //       engine.postMessage(\"isready\");\n  //       // announced_game_over = false;\n  //     },\n  //     evalMove: function () {\n  //       evalMove();\n  //     },\n  //   };\n  // };\n\n  // const onDrop = ({ sourceSquare, targetSquare }) => {\n\n  //   if (!turn || !canSubmitMove) return;\n  //   const move = game.move({ from: sourceSquare, to: targetSquare })\n  //   if (move === null) return; // illegal move  \n  //   console.log(game.fen());\n  //   // grab player proposed position and show it\n  //   proposedMove.current = game.fen();\n  //   target.current = targetSquare;\n  //   source.current = sourceSquare\n  //   setFen(proposedMove.current);\n  //   setCanSubmitMove(false);\n\n  //   // game.undo();\n\n  //   // highlight the move made\n  //   setSquareStyles(squareStyling(sourceSquare, targetSquare));\n\n  //   return new Promise((resolve) => {\n  //     resolve();\n  //   }).then(() => engineGame().evalMove());\n  // };\n\n  return /*#__PURE__*/_jsxDEV(TestButton, {\n    style: {\n      fontSize: \"50px\"\n    },\n    children: \"Test\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 7\n  }, this);\n};\n\n// const BoardStyle = {\n//   border: \"10px solid #868BAC\",\n//   boxShadow: `0 5px 15px rgba(0, 0, 0, 0.5)`,\n//   \"border-radius\": \"5px\",\n//   position: \"relative\",\n//   left: \"5%\"\n// };\n_c2 = Game;\nexport default Game;\n/* <GameWrapper>\n        <div style={{ gridArea: \"chessboard\" }}>\n          <Chessboard\n            id=\"board!\"\n            position={fen}\n            onDrop={onDrop}\n            boardStyle={BoardStyle}\n            orientation={isWhite ? \"white\" : \"black\"}\n            calcWidth={(screen) => Math.min(screen.screenHeight * .5, screen.screenWidth * .53)}\n            squareStyles={squareStyles}\n          />\n        </div>\n        <Logo style={{ width: \"50%\", height: \"auto\" }}></Logo>\n        <TeamRoster whiteTeam={whiteTeam} blackTeam={blackTeam} gameStarted={gameStarted} />\n        <Ratings team={isWhite ? whiteTeam : blackTeam} gameStarted={gameStarted} />\n        <GameControls gameStarted={gameStarted} socket={socket} roomCode={roomCode} host={host}\n          isWhite={isWhite} username={username} setIsWhite={setIsWhite} />\n        <h1 style={{ color: \"#FFFFFF\", fontFamily: \"Montserrat\", fontSize: \"1.5rem\" }}>{turn ? \"Your\" : \"Not Your\"} Turn</h1>\n        <h1 style={{ color: \"#FFFFFF\" }}>\n          <Gameover isCheckmate={isCheckmate} timeOut={timeOut} whiteTurn={whiteTurn} />\n        </h1>\n        <Footer>\n          <SettingButton setWhiteTime={setWhiteTime} setBlackTime={setBlackTime} socket={socket} />\n          <RoomCodeButton>ROOM: {roomCode}</RoomCodeButton>\n          <MatchClock whiteTime={whiteTime} blackTime={blackTime} whiteTurn={whiteTurn} gameStarted={gameStarted} />\n        </Footer>\n        <Footer>\n          hello\n        </Footer>\n\n        <TestButton>\n          Testy\n        </TestButton>\n      </GameWrapper> */\nvar _c, _c2;\n$RefreshReg$(_c, \"TestButton\");\n$RefreshReg$(_c2, \"Game\");","map":{"version":3,"names":["Chessboard","Chess","useState","useEffect","useRef","SettingButton","Logo","GameWrapper","RoomCode","RoomCodeButton","NonChessboard","Ratings","Gameover","GameControls","MatchClock","usePlayerContext","begin_game_handler","next_turn_handler","room_joined_handler","timer_handler","update_teams_handler","sendRating","squareStyling","TeamRoster","styled","Footer","div","TestButton","console","log","engine","Worker","game","Game","fontSize"],"sources":["/Users/lawrence/Documents/Projects/theWeakestLink/client/src/main_pages/gameFunctional.js"],"sourcesContent":["import Chessboard from \"chessboardjsx\";\nimport { Chess } from \"chess.js\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { SettingButton } from \"../styled_components/settingButton\";\nimport { Logo } from \"../styled_components\"\nimport { GameWrapper, RoomCode as RoomCodeButton, NonChessboard } from \"../styled_components/gameComponents\"\nimport { Ratings, Gameover } from \"../items/display_components.js\";\nimport { GameControls } from \"../items/interactive_components\";\nimport { MatchClock } from \"../items/matchClock.js\";\nimport { usePlayerContext } from '../contexts/PlayerContext';\nimport {\n  begin_game_handler, next_turn_handler, room_joined_handler,\n  timer_handler, update_teams_handler\n} from \"../handlers/socket_handlers.js\";\nimport { sendRating, squareStyling } from \"../handlers/helpers.js\"\nimport TeamRoster from \"../items/teamRoster.js\";\nimport styled from 'styled-components';\n\n// const Footer = styled.div`\n//   display: flex;\n//   width: 100%;\n//   height: 100%;\n//   margin: 0 0 34px 34px;\n//   justify-content: start;\n//   gap: 5%;\n//   grid-area: logo;\n// `;\nconst Footer = styled.div`\n  background-color: red;\n`;\n\nconst TestButton = styled.div`\n  background-color: green;\n`;\n\nconsole.log(\"Game functional loaded\")\n\nconst engine = new Worker(\"stockfish.js\");\nconst game = new Chess();\n\nconst Game = () => {\n  // const [fen, setFen] = useState(\"start\");\n  // const [turn, setTurn] = useState(false);\n  // const [gameStarted, setGameStarted] = useState(false);\n  // const [canSubmitMove, setCanSubmitMove] = useState(false);\n  // const [whiteTurn, setWhiteTurn] = useState(false);\n  // const [isCheckmate, setIsCheckmate] = useState(false);\n  // const [timeOut, setTimeOut] = useState(false);\n  // const [whiteTime, setWhiteTime] = useState(50);\n  // const [blackTime, setBlackTime] = useState(50);\n  // const [whiteTeam, setWhiteTeam] = useState(new Map());\n  // const [blackTeam, setBlackTeam] = useState(new Map());\n  // const [history, setHistory] = useState([]);\n  // const [squareStyles, setSquareStyles] = useState({});\n  // const proposedMove = useRef(\"\");\n  // const target = useRef(\"\");\n  // const source = useRef(\"\");\n\n\n  // const { socket,\n  //   roomCode,\n  //   setRoomCode,\n  //   host,\n  //   isWhite,\n  //   setIsWhite,\n  //   username,\n  // } = usePlayerContext();\n\n  // // core logic handler mounts\n  // useEffect(() => {\n  //   room_joined_handler(socket, setRoomCode, setIsWhite);\n\n  //   next_turn_handler(socket, game, setFen, setIsCheckmate, setGameStarted,\n  //     setWhiteTurn, setTurn, isWhite, setCanSubmitMove, roomCode, setHistory, setSquareStyles);\n\n  //   update_teams_handler(socket, setWhiteTeam, setBlackTeam);\n\n  //   begin_game_handler(socket, game, setWhiteTurn, setGameStarted, setFen, setIsCheckmate,\n  //     setTimeOut, isWhite, setTurn, setCanSubmitMove, setSquareStyles);\n\n  //   timer_handler(socket, setGameStarted, setTimeOut, setTurn, setCanSubmitMove, roomCode, setWhiteTime, setBlackTime);\n\n  //   return () => {\n  //     socket.removeAllListeners();\n  //   }\n\n  // }, [isWhite, roomCode, setIsWhite, setRoomCode, socket]);\n\n\n\n  // const engineGame = () => {\n\n  //   const evalMove = () => {\n  //     engine.postMessage(\"ucinewgame\");\n  //     console.log(\"proposedMove.current:\" + proposedMove.current)\n  //     engine.postMessage(\"position fen \" + proposedMove.current);\n  //     engine.postMessage(\"go depth 5\")\n\n  //     // engine.postMessage(\"eval\");\n  //     // if (!game.isGameOver()) {\n  //     //   engine.postMessage(\"ucinewgame\");\n  //     //   console.log(\"proposedMove.current:\" + proposedMove.current)\n  //     //   engine.postMessage(\"position fen \" + proposedMove.current);\n  //     //   engine.postMessage(\"eval\");\n  //     // }\n  //   };\n\n  //   engine.onmessage = (event) => {\n  //     let line;\n  //     console.log(\"trigger\")\n\n  //     if (event && typeof event === \"object\") {\n  //       line = event.data;\n  //     } else {\n  //       line = event;\n  //     }\n  //     console.log(line);\n  //     if (line.substring(0, 8) === \"bestmove\") {\n\n  //       let score = line.substring(line.indexOf(\"score\") + 6);\n  //       console.log(score)\n  //       // if (!isWhite) score = score * -1;\n  //       sendRating(socket, score, proposedMove.current, roomCode, isWhite, username, target, source);\n  //     }\n  //   };\n\n  //   return {\n  //     start: function () {\n  //       console.log(\"starting\")\n  //       engine.postMessage(\"ucinewgame\");\n  //       engine.postMessage(\"isready\");\n  //       // announced_game_over = false;\n  //     },\n  //     evalMove: function () {\n  //       evalMove();\n  //     },\n  //   };\n  // };\n\n  // const onDrop = ({ sourceSquare, targetSquare }) => {\n\n  //   if (!turn || !canSubmitMove) return;\n  //   const move = game.move({ from: sourceSquare, to: targetSquare })\n  //   if (move === null) return; // illegal move  \n  //   console.log(game.fen());\n  //   // grab player proposed position and show it\n  //   proposedMove.current = game.fen();\n  //   target.current = targetSquare;\n  //   source.current = sourceSquare\n  //   setFen(proposedMove.current);\n  //   setCanSubmitMove(false);\n\n  //   // game.undo();\n\n  //   // highlight the move made\n  //   setSquareStyles(squareStyling(sourceSquare, targetSquare));\n\n  //   return new Promise((resolve) => {\n  //     resolve();\n  //   }).then(() => engineGame().evalMove());\n  // };\n\n  return (\n\n      <TestButton style = {{fontSize: \"50px\"}}>\n        Test\n      </TestButton>\n\n  );\n}\n\n\n\n// const BoardStyle = {\n//   border: \"10px solid #868BAC\",\n//   boxShadow: `0 5px 15px rgba(0, 0, 0, 0.5)`,\n//   \"border-radius\": \"5px\",\n//   position: \"relative\",\n//   left: \"5%\"\n// };\n\nexport default Game;\n/* <GameWrapper>\n        <div style={{ gridArea: \"chessboard\" }}>\n          <Chessboard\n            id=\"board!\"\n            position={fen}\n            onDrop={onDrop}\n            boardStyle={BoardStyle}\n            orientation={isWhite ? \"white\" : \"black\"}\n            calcWidth={(screen) => Math.min(screen.screenHeight * .5, screen.screenWidth * .53)}\n            squareStyles={squareStyles}\n          />\n        </div>\n        <Logo style={{ width: \"50%\", height: \"auto\" }}></Logo>\n        <TeamRoster whiteTeam={whiteTeam} blackTeam={blackTeam} gameStarted={gameStarted} />\n        <Ratings team={isWhite ? whiteTeam : blackTeam} gameStarted={gameStarted} />\n        <GameControls gameStarted={gameStarted} socket={socket} roomCode={roomCode} host={host}\n          isWhite={isWhite} username={username} setIsWhite={setIsWhite} />\n        <h1 style={{ color: \"#FFFFFF\", fontFamily: \"Montserrat\", fontSize: \"1.5rem\" }}>{turn ? \"Your\" : \"Not Your\"} Turn</h1>\n        <h1 style={{ color: \"#FFFFFF\" }}>\n          <Gameover isCheckmate={isCheckmate} timeOut={timeOut} whiteTurn={whiteTurn} />\n        </h1>\n        <Footer>\n          <SettingButton setWhiteTime={setWhiteTime} setBlackTime={setBlackTime} socket={socket} />\n          <RoomCodeButton>ROOM: {roomCode}</RoomCodeButton>\n          <MatchClock whiteTime={whiteTime} blackTime={blackTime} whiteTurn={whiteTurn} gameStarted={gameStarted} />\n        </Footer>\n        <Footer>\n          hello\n        </Footer>\n\n        <TestButton>\n          Testy\n        </TestButton>\n      </GameWrapper> */"],"mappings":";AAAA,OAAOA,UAAU,MAAM,eAAe;AACtC,SAASC,KAAK,QAAQ,UAAU;AAChC,SAASC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACnD,SAASC,aAAa,QAAQ,oCAAoC;AAClE,SAASC,IAAI,QAAQ,sBAAsB;AAC3C,SAASC,WAAW,EAAEC,QAAQ,IAAIC,cAAc,EAAEC,aAAa,QAAQ,qCAAqC;AAC5G,SAASC,OAAO,EAAEC,QAAQ,QAAQ,gCAAgC;AAClE,SAASC,YAAY,QAAQ,iCAAiC;AAC9D,SAASC,UAAU,QAAQ,wBAAwB;AACnD,SAASC,gBAAgB,QAAQ,2BAA2B;AAC5D,SACEC,kBAAkB,EAAEC,iBAAiB,EAAEC,mBAAmB,EAC1DC,aAAa,EAAEC,oBAAoB,QAC9B,gCAAgC;AACvC,SAASC,UAAU,EAAEC,aAAa,QAAQ,wBAAwB;AAClE,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,OAAOC,MAAM,MAAM,mBAAmB;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA,MAAMC,MAAM,GAAGD,MAAM,CAACE,GAAI;AAC1B;AACA,CAAC;AAED,MAAMC,UAAU,GAAGH,MAAM,CAACE,GAAI;AAC9B;AACA,CAAC;AAAC,KAFIC,UAAU;AAIhBC,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;AAErC,MAAMC,MAAM,GAAG,IAAIC,MAAM,CAAC,cAAc,CAAC;AACzC,MAAMC,IAAI,GAAG,IAAI/B,KAAK,EAAE;AAExB,MAAMgC,IAAI,GAAG,MAAM;EACjB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;;EAEA;;EAEA;EACA;;EAEA;;EAEA;EACA;EACA;;EAEA;;EAIA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;;EAEA,oBAEI,QAAC,UAAU;IAAC,KAAK,EAAI;MAACC,QAAQ,EAAE;IAAM,CAAE;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QAE3B;AAGnB,CAAC;;AAID;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,MA3IMD,IAAI;AA6IV,eAAeA,IAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjCA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}