{"ast":null,"code":"var _jsxFileName = \"/Users/lawrence/Documents/Projects/theWeakestLink/client/src/main_pages/gameFunctional.js\",\n  _s = $RefreshSig$();\nimport Chessboard from \"chessboardjsx\";\nimport { Chess } from \"chess.js\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { SettingButton } from \"../styled_components/settingButton\";\nimport { Logo } from \"../styled_components\";\nimport { GameWrapper, RoomCode as RoomCodeButton, TeamName, GameplaySection, NonChessboard } from \"../styled_components/gameComponents\";\nimport { TeamSection } from \"../styled_components/gameComponents\";\nimport { Teams, Ratings, Gameover } from \"../items/display_components.js\";\nimport { GameControls } from \"../items/interactive_components\";\nimport { CountdownTimer } from \"../items/client_clock.js\";\nimport { usePlayerContext } from '../contexts/PlayerContext';\nimport { begin_game_handler, next_turn_handler, room_joined_handler, timer_handler, update_teams_handler } from \"../handlers/socket_handlers.js\";\nimport { sendRating, squareStyling } from \"../handlers/helpers.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconsole.log(\"Game functional loaded\");\nconst Game = () => {\n  _s();\n  const [fen, setFen] = useState(\"start\");\n  const [turn, setTurn] = useState(false);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [canSubmitMove, setCanSubmitMove] = useState(false);\n  const [whiteTurn, setWhiteTurn] = useState(false);\n  const [isCheckmate, setIsCheckmate] = useState(false);\n  const [timeOut, setTimeOut] = useState(false);\n  const [whiteTime, setWhiteTime] = useState(50);\n  const [blackTime, setBlackTime] = useState(50);\n  const [whiteTeam, setWhiteTeam] = useState(new Map());\n  const [blackTeam, setBlackTeam] = useState(new Map());\n  const [history, setHistory] = useState([]);\n  const [squareStyles, setSquareStyles] = useState({});\n  const proposedMove = useRef(\"\");\n  const target = useRef(\"\");\n  const source = useRef(\"\");\n  const {\n    socket,\n    roomCode,\n    setRoomCode,\n    host,\n    isWhite,\n    setIsWhite,\n    username\n  } = usePlayerContext();\n\n  // core logic handler mounts\n  useEffect(() => {\n    room_joined_handler(socket, setRoomCode, setIsWhite);\n    next_turn_handler(socket, game, setFen, setIsCheckmate, setGameStarted, setWhiteTurn, setTurn, isWhite, setCanSubmitMove, roomCode, setHistory, setSquareStyles);\n    update_teams_handler(socket, setWhiteTeam, setBlackTeam);\n    begin_game_handler(socket, game, setWhiteTurn, setGameStarted, setFen, setIsCheckmate, setTimeOut, isWhite, setTurn, setCanSubmitMove, setSquareStyles);\n    timer_handler(socket, setGameStarted, setTimeOut, setTurn, setCanSubmitMove, roomCode, setWhiteTime, setBlackTime);\n    return () => {\n      socket.removeAllListeners();\n    };\n  }, [isWhite, roomCode, setIsWhite, setRoomCode, socket]);\n\n  // mount the stockfish engine\n  useEffect(() => {\n    const engine = new Worker(\"stockfish.js\");\n    const game = new Chess();\n    return () => {\n      engine.terminate();\n    };\n  });\n  const engineGame = () => {\n    const evalMove = () => {\n      engine.postMessage(\"ucinewgame\");\n      console.log(\"proposedMove.current:\" + proposedMove.current);\n      engine.postMessage(\"position fen \" + proposedMove.current);\n      // engine.postMessage(\"eval\");\n      // if (!game.isGameOver()) {\n      //   engine.postMessage(\"ucinewgame\");\n      //   console.log(\"proposedMove.current:\" + proposedMove.current)\n      //   engine.postMessage(\"position fen \" + proposedMove.current);\n      //   engine.postMessage(\"eval\");\n      // }\n    };\n\n    engine.onmessage = event => {\n      let line;\n      if (event && typeof event === \"object\") {\n        line = event.data;\n      } else {\n        line = event;\n      }\n      console.log(line);\n      if (line.substr(0, \"Total Evaluation\".length) === \"Total Evaluation\") {\n        let score = parseFloat(line.substr(18).substr(0, 4));\n        if (!isWhite) score = score * -1;\n        sendRating(socket, score, proposedMove.current, roomCode, isWhite, username, target, source);\n      }\n    };\n    return {\n      start: function () {\n        console.log(\"starting\");\n        engine.postMessage(\"ucinewgame\");\n        engine.postMessage(\"isready\");\n        // announced_game_over = false;\n      },\n\n      evalMove: function () {\n        evalMove();\n      }\n    };\n  };\n  const onDrop = _ref => {\n    let {\n      sourceSquare,\n      targetSquare\n    } = _ref;\n    if (!turn || !canSubmitMove) return;\n    const move = game.move({\n      from: sourceSquare,\n      to: targetSquare\n    });\n    if (move === null) return; // illegal move  \n    console.log(game.fen());\n    // grab player proposed position and show it\n    proposedMove.current = game.fen();\n    target.current = targetSquare;\n    source.current = sourceSquare;\n    setFen(proposedMove.current);\n    setCanSubmitMove(false);\n\n    // game.undo();\n\n    // highlight the move made\n    setSquareStyles(squareStyling(sourceSquare, targetSquare));\n    return new Promise(resolve => {\n      resolve();\n    }).then(() => engineGame().evalMove());\n  };\n  return /*#__PURE__*/_jsxDEV(GameWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Chessboard, {\n      id: \"board!\",\n      position: fen,\n      onDrop: onDrop,\n      boardStyle: boardStyle,\n      orientation: isWhite ? \"white\" : \"black\",\n      calcWidth: screen => Math.min(screen.screenHeight * .9, screen.screenWidth * .53),\n      squareStyles: squareStyles\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(NonChessboard, {\n      children: [/*#__PURE__*/_jsxDEV(Logo, {\n        style: {\n          width: \"50%\",\n          height: \"auto\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            \"flex-flow\": \"row wrap\",\n            \"justify-content\": \"center\",\n            height: \"fit-content\",\n            width: \"100%\",\n            \"margin-top\": \"17%\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(TeamSection, {\n            children: [/*#__PURE__*/_jsxDEV(TeamName, {\n              color: \"white\",\n              children: \"WHITE\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Teams, {\n              team: whiteTeam,\n              isWhite: true,\n              gameStarted: gameStarted\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TeamSection, {\n            children: [/*#__PURE__*/_jsxDEV(TeamName, {\n              children: \"BLACK\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Teams, {\n              team: blackTeam,\n              isWhite: false,\n              gameStarted: gameStarted\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Ratings, {\n          team: isWhite ? whiteTeam : blackTeam,\n          gameStarted: gameStarted\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), !gameStarted && /*#__PURE__*/_jsxDEV(GameControls, {\n          socket: socket,\n          roomCode: roomCode,\n          host: host,\n          isWhite: isWhite,\n          username: username,\n          setIsWhite: setIsWhite\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 28\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          style: {\n            color: \"#FFFFFF\"\n          },\n          children: [turn ? \"Your\" : \"Not Your\", \" Turn\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          style: {\n            color: \"#FFFFFF\"\n          },\n          children: /*#__PURE__*/_jsxDEV(Gameover, {\n            isCheckmate: isCheckmate,\n            timeOut: timeOut,\n            whiteTurn: whiteTurn\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            height: \"8%\",\n            width: \"30%\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(CountdownTimer, {\n            totalSeconds: whiteTime,\n            isRunning: whiteTurn && gameStarted\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CountdownTimer, {\n            totalSeconds: blackTime,\n            isRunning: !whiteTurn && gameStarted\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"section\", {\n        id: \"footer\",\n        style: {\n          display: \"flex\",\n          width: \"100%\",\n          margin: \"0 0 34px 34px\",\n          'justify-content': 'start'\n        },\n        children: [/*#__PURE__*/_jsxDEV(SettingButton, {\n          setWhiteTime: setWhiteTime,\n          setBlackTime: setBlackTime,\n          socket: socket\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RoomCodeButton, {\n          children: [\"ROOM: \", roomCode]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"wjZmRN3+fl+SV7RyvOOIb6+ek+I=\", false, function () {\n  return [usePlayerContext];\n});\n_c = Game;\nexport default Game;\nconst boardStyle = {\n  border: \"10px solid #868BAC\",\n  boxShadow: `0 5px 15px rgba(0, 0, 0, 0.5)`,\n  \"border-radius\": \"5px\",\n  position: \"relative\",\n  left: \"5%\"\n};\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["Chessboard","Chess","useState","useEffect","useRef","SettingButton","Logo","GameWrapper","RoomCode","RoomCodeButton","TeamName","GameplaySection","NonChessboard","TeamSection","Teams","Ratings","Gameover","GameControls","CountdownTimer","usePlayerContext","begin_game_handler","next_turn_handler","room_joined_handler","timer_handler","update_teams_handler","sendRating","squareStyling","console","log","Game","fen","setFen","turn","setTurn","gameStarted","setGameStarted","canSubmitMove","setCanSubmitMove","whiteTurn","setWhiteTurn","isCheckmate","setIsCheckmate","timeOut","setTimeOut","whiteTime","setWhiteTime","blackTime","setBlackTime","whiteTeam","setWhiteTeam","Map","blackTeam","setBlackTeam","history","setHistory","squareStyles","setSquareStyles","proposedMove","target","source","socket","roomCode","setRoomCode","host","isWhite","setIsWhite","username","game","removeAllListeners","engine","Worker","terminate","engineGame","evalMove","postMessage","current","onmessage","event","line","data","substr","length","score","parseFloat","start","onDrop","sourceSquare","targetSquare","move","from","to","Promise","resolve","then","boardStyle","screen","Math","min","screenHeight","screenWidth","width","height","display","color","justifyContent","alignItems","margin","border","boxShadow","position","left"],"sources":["/Users/lawrence/Documents/Projects/theWeakestLink/client/src/main_pages/gameFunctional.js"],"sourcesContent":["import Chessboard from \"chessboardjsx\";\nimport { Chess } from \"chess.js\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { SettingButton } from \"../styled_components/settingButton\";\nimport { Logo } from \"../styled_components\"\nimport { GameWrapper, RoomCode as RoomCodeButton, TeamName, GameplaySection, NonChessboard } from \"../styled_components/gameComponents\"\nimport { TeamSection } from \"../styled_components/gameComponents\";\nimport { Teams, Ratings, Gameover } from \"../items/display_components.js\";\nimport { GameControls } from \"../items/interactive_components\";\nimport { CountdownTimer } from \"../items/client_clock.js\";\nimport { usePlayerContext } from '../contexts/PlayerContext';\nimport {\n  begin_game_handler, next_turn_handler, room_joined_handler,\n  timer_handler, update_teams_handler\n} from \"../handlers/socket_handlers.js\";\nimport { sendRating, squareStyling } from \"../handlers/helpers.js\"\n\nconsole.log(\"Game functional loaded\")\n\nconst Game = () => {\n  const [fen, setFen] = useState(\"start\");\n  const [turn, setTurn] = useState(false);\n  const [gameStarted, setGameStarted] = useState(false);\n  const [canSubmitMove, setCanSubmitMove] = useState(false);\n  const [whiteTurn, setWhiteTurn] = useState(false);\n  const [isCheckmate, setIsCheckmate] = useState(false);\n  const [timeOut, setTimeOut] = useState(false);\n  const [whiteTime, setWhiteTime] = useState(50);\n  const [blackTime, setBlackTime] = useState(50);\n  const [whiteTeam, setWhiteTeam] = useState(new Map());\n  const [blackTeam, setBlackTeam] = useState(new Map());\n  const [history, setHistory] = useState([]);\n  const [squareStyles, setSquareStyles] = useState({});\n  const proposedMove = useRef(\"\");\n  const target = useRef(\"\");\n  const source = useRef(\"\");\n\n\n  const { socket,\n    roomCode,\n    setRoomCode,\n    host,\n    isWhite,\n    setIsWhite,\n    username,\n  } = usePlayerContext();\n\n\n  // core logic handler mounts\n  useEffect(() => {\n    room_joined_handler(socket, setRoomCode, setIsWhite);\n\n    next_turn_handler(socket, game, setFen, setIsCheckmate, setGameStarted,\n      setWhiteTurn, setTurn, isWhite, setCanSubmitMove, roomCode, setHistory, setSquareStyles);\n\n    update_teams_handler(socket, setWhiteTeam, setBlackTeam);\n\n    begin_game_handler(socket, game, setWhiteTurn, setGameStarted, setFen, setIsCheckmate,\n      setTimeOut, isWhite, setTurn, setCanSubmitMove, setSquareStyles);\n\n    timer_handler(socket, setGameStarted, setTimeOut, setTurn, setCanSubmitMove, roomCode, setWhiteTime, setBlackTime);\n\n    return () => {\n      socket.removeAllListeners();\n    }\n\n  }, [isWhite, roomCode, setIsWhite, setRoomCode, socket]);\n\n  // mount the stockfish engine\n  useEffect(() => {\n    const engine = new Worker(\"stockfish.js\");\n    const game = new Chess();\n\n    return () => {\n      engine.terminate()\n    }\n  })\n\n\n  const engineGame = () => {\n  \n    const evalMove = () => {\n      engine.postMessage(\"ucinewgame\");\n      console.log(\"proposedMove.current:\" + proposedMove.current)\n      engine.postMessage(\"position fen \" + proposedMove.current);\n      // engine.postMessage(\"eval\");\n      // if (!game.isGameOver()) {\n      //   engine.postMessage(\"ucinewgame\");\n      //   console.log(\"proposedMove.current:\" + proposedMove.current)\n      //   engine.postMessage(\"position fen \" + proposedMove.current);\n      //   engine.postMessage(\"eval\");\n      // }\n    };\n  \n    engine.onmessage = (event) => {\n      let line;\n  \n      if (event && typeof event === \"object\") {\n        line = event.data;\n      } else {\n        line = event;\n      }\n      console.log(line);\n      if (line.substr(0, \"Total Evaluation\".length) === \"Total Evaluation\") {\n        let score = parseFloat(line.substr(18).substr(0, 4));\n        if (!isWhite) score = score * -1;\n        sendRating(socket, score, proposedMove.current, roomCode, isWhite, username, target, source);\n      }\n    };\n  \n    return {\n      start: function () {\n        console.log(\"starting\")\n        engine.postMessage(\"ucinewgame\");\n        engine.postMessage(\"isready\");\n        // announced_game_over = false;\n      },\n      evalMove: function () {\n        evalMove();\n      },\n    };\n  };\n\n  const onDrop = ({ sourceSquare, targetSquare }) => {\n\n    if (!turn || !canSubmitMove) return;\n    const move = game.move({ from: sourceSquare, to: targetSquare })\n    if (move === null) return; // illegal move  \n    console.log(game.fen());\n    // grab player proposed position and show it\n    proposedMove.current = game.fen();\n    target.current = targetSquare;\n    source.current = sourceSquare\n    setFen(proposedMove.current);\n    setCanSubmitMove(false);\n\n    // game.undo();\n\n    // highlight the move made\n    setSquareStyles(squareStyling(sourceSquare, targetSquare));\n\n    return new Promise((resolve) => {\n      resolve();\n    }).then(() => engineGame().evalMove());\n  };\n\n  return (\n\n    <GameWrapper>\n      <Chessboard\n        id=\"board!\"\n        position={fen}\n        onDrop={onDrop}\n        boardStyle={boardStyle}\n        orientation={isWhite ? \"white\" : \"black\"}\n        calcWidth={(screen) => Math.min(screen.screenHeight * .9, screen.screenWidth * .53)}\n        squareStyles={squareStyles}\n      />\n\n      <NonChessboard>\n\n        <Logo style={{ width: \"50%\", height: \"auto\" }}></Logo>\n\n        <   >\n          <div style={{ display: \"flex\", \"flex-flow\": \"row wrap\", \"justify-content\": \"center\", height: \"fit-content\", width: \"100%\", \"margin-top\": \"17%\" }}>\n            <TeamSection>\n              <TeamName color=\"white\">WHITE</TeamName>\n              <Teams team={whiteTeam} isWhite={true} gameStarted={gameStarted} />\n            </TeamSection>\n            <TeamSection>\n              <TeamName>BLACK</TeamName>\n              <Teams team={blackTeam} isWhite={false} gameStarted={gameStarted} />\n            </TeamSection>\n          </div>\n\n\n          <Ratings team={isWhite ? whiteTeam : blackTeam} gameStarted={gameStarted} />\n\n          {!gameStarted && <GameControls socket={socket} roomCode={roomCode} host={host}\n            isWhite={isWhite} username={username} setIsWhite={setIsWhite} />}\n\n          <h1 style={{ color: \"#FFFFFF\" }}>{turn ? \"Your\" : \"Not Your\"} Turn</h1>\n          <h1 style={{ color: \"#FFFFFF\" }}>\n            <Gameover isCheckmate={isCheckmate} timeOut={timeOut} whiteTurn={whiteTurn} />\n          </h1>\n\n          <div style={{ display: \"flex\", height: \"8%\", width: \"30%\", justifyContent: \"center\", alignItems: \"center\" }}>\n            <CountdownTimer totalSeconds={whiteTime} isRunning={(whiteTurn && gameStarted)} />\n            <CountdownTimer totalSeconds={blackTime} isRunning={(!whiteTurn && gameStarted)} />\n          </div>\n        </>\n\n        <section id=\"footer\" style={{ display: \"flex\", width: \"100%\", margin: \"0 0 34px 34px\", 'justify-content': 'start' }}>\n          <SettingButton setWhiteTime={setWhiteTime} setBlackTime={setBlackTime} socket={socket} />\n          <RoomCodeButton>ROOM: {roomCode}</RoomCodeButton>\n        </section>\n\n      </NonChessboard>\n\n    </GameWrapper>\n  );\n}\n\nexport default Game;\n\nconst boardStyle = {\n  border: \"10px solid #868BAC\",\n  boxShadow: `0 5px 15px rgba(0, 0, 0, 0.5)`,\n  \"border-radius\": \"5px\",\n  position: \"relative\",\n  left: \"5%\"\n};\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}